{
	"$schema": "https://schema.management.azure.com/schemas/2021-09-09/uiFormDefinition.schema.json",
	"view": {
		"kind": "Form",
		"properties": {
			"title": "Function App",
			"steps": [
				{
					"name": "basics",
					"label": "Basics",
					"elements": [
						{
							"name": "introTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "This template deploys a function app limited to code (it cannot do Container Images), which lets you group functions as a logical unit for easier management, deployment and sharing of resources. Functions lets you execute your code in a serverless environment without having to first create a VM or publish a web application.",
								"link": {
									"label": "Learn more",
									"uri": "https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview"
								}
							}
						},
						{
							"name": "cafTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "The Cloud Adoption Framework (CAF) specifies some best practices when naming resources. Some customers have chosen to reverse this order of naming elements by placing the resource type at the end of the naming convention. This solution allows you to select the name of most resources, but there are several that are automatically named including Private Endpoints. Select 'Yes' below to ensure the automatically named resources are named with this reverse convention or leave it set to 'No' to follow the CAF.",
								"link": {
									"label": "Learn more",
									"uri": "https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming"
								}
							}
						},
						{
							"name": "nameConvResTypeAtEnd",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Reverse the CAF naming convention.",
							"defaultValue": "No",
							"toolTip": "",
							"constraints": {
								"allowedValues": [
									{
										"label": "Yes",
										"value": true
									},
									{
										"label": "No",
										"value": false
									}
								]
							},
							"visible": true
						},
						{
							"name": "scope",
							"type": "Microsoft.Common.ResourceScope",
							"instanceDetailsLabel": "Function App Details",
							"location": {
								"resourceTypes": [
									"microsoft.web/sites"
								]
							}
						},
						{
							"name": "subscriptionsApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "/subscriptions?api-version=2022-12-01"
							}
						},
						{
							"name": "name_checkNameAvailability",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "POST",
								"path": "[concat(steps('basics').scope.subscription.id,'/providers/Microsoft.Web/checkNameAvailability?api-version=2022-03-01')]",
								"body": {
									"name": "[steps('basics').functionAppName]",
									"type": "Microsoft.Web/sites"
								}
							}
						},
						{
							"name": "name_rePUT",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Web/sites/',steps('basics').functionAppName,'?api-version=2022-03-01')]",
								"body": {}
							}
						},
						{
							"name": "functionAppName",
							"type": "Microsoft.Common.TextBox",
							"label": "Function App Name",
							"placeholder": "func-<name>-<env>-<region>",
							"toolTip": "Required. The name of the function App. The name must be globally unique for the namespace 'azurewebsites.net'.",
							"constraints": {
								"required": true,
								"validations": [
									{
										"isValid": "[or(steps('basics').name_checkNameAvailability.nameAvailable,equals(steps('basics').name_checkNameAvailability.reason,'AlreadyExists'))]",
										"message": "[steps('basics').name_checkNameAvailability.message]"
									},
									{
										"isValid": "[or(steps('basics').name_checkNameAvailability.nameAvailable,equals(steps('basics').name_rePUT.id,concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Web/sites/',steps('basics').functionAppName)),not(equals(steps('basics').name_checkNameAvailability.reason,'AlreadyExists')))]",
										"message": "[steps('basics').name_checkNameAvailability.message]"
									}
								]
							},
							"visible": true
						},
						{
							"type": "Microsoft.Common.ResourceGroupSelector",
							"name": "functionAppResourceGroup",
							"label": "Function App Resource Group",
							"placeholder": "rg-<functionAppName>",
							"allowedMode": "Both",
							"required": false,
							"scope": {
								"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
								"location": "[steps('basics').scope.location.name]"
							},
							"visible": true
						},
						{
							"name": "functionAppStacksApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat('/providers/', 'Microsoft.Web/locations/', steps('basics').scope.location.name, '/functionAppStacks?api-version=2022-03-01')]"
							}
						},
						{
							"name": "runtimeStackName",
							"type": "Microsoft.Common.DropDown",
							"label": "Runtime Stack",
							"multiLine": true,
							"toolTip": "The runtime stack used by the function App.",
							"constraints": {
								"required": true,
								"allowedValues": "[map(steps('basics').functionAppStacksApi.value, (stack) => parse(concat('{\"label\":\"', stack.properties.displayText, '\",\"description\":\"Preferred OS: ', stack.properties.preferredOs, '\",\"value\":\"', stack.name, '\"}')))]"
							},
							"visible": true
						},
						{
							"name": "runtimeStackMajorVersion",
							"type": "Microsoft.Common.DropDown",
							"label": "Runtime stack Major Version",
							"multiLine": true,
							"toolTip": "The runtime stack used by the function App.",
							"constraints": {
								"required": false,
								"allowedValues": "[map(first(map(filter(steps('basics').functionAppStacksApi.value, (stack) => equals(stack.name, steps('basics').runtimeStackName)), (ver) => ver.properties.majorVersions)), (ver) => parse(concat('{\"label\":\"', ver.displayText, '\",\"value\":\"', ver.displayText, '\"}')))]"
							},
							"visible": true
						},
						{
							"name": "runtimeStackMinorVersion",
							"type": "Microsoft.Common.DropDown",
							"label": "Runtime Stack Minor Version",
							"defaultValue": "[steps('basics').runtimeStackMajorVersion]",
							"multiLine": true,
							"toolTip": "The runtime stack used by the function App.",
							"constraints": {
								"required": false,
								"allowedValues": "[map(first(map(filter(first(map(filter(steps('basics').functionAppStacksApi.value, (stack) => equals(stack.name, steps('basics').runtimeStackName)), (stack) => stack.properties.majorVersions)), (majVer) => equals(majVer.displayText, steps('basics').runtimeStackMajorVersion)), (majVer) => majVer.minorVersions)), (minVer) => parse(concat('{\"label\":\"', minVer.displayText, '\",\"value\":\"', minVer.value, '\"}')))]"
							},
							"visible": true
						},
						{
							"name": "osTextBlock1",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "The Operating System has been recommended for you based on your selection of runtime stack."
							}
						},
						{
							"name": "functionAppKind",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Operating System",
							"defaultValue": "[if(equals(steps('basics').runtimeStackName, 'python'),'Linux', 'Windows')]",
							"constraints": {
								"allowedValues": "[if(equals(steps('basics').runtimeStackName, 'python'), parse('[{\"label\":\"Linux\",\"value\":\"functionapp,linux\"}]'), parse('[{\"label\":\"Windows\",\"value\":\"functionapp\"},{\"label\":\"Linux\",\"value\":\"functionapp,linux\"}]'))]"
							},
							"visible": true
						},
						{
							"name": "hosting",
							"type": "Microsoft.Common.Section",
							"label": "Hosting",
							"elements": [
								{
									"name": "geoRegionsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id,'/providers/Microsoft.Web/geoRegions?api-version=2022-03-01')]"
									}
								},
								{
									"name": "hostingTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "The plan you choose dictates how your app scales, what features are enabled, and how it is priced.",
										"link": {
											"label": "Learn more",
											"uri": "https://learn.microsoft.com/azure/azure-functions/functions-scale"
										}
									}
								},
								{
									"name": "hostingPlanType",
									"type": "Microsoft.Common.DropDown",
									"label": "Hosting options and plans",
									"multiLine": true,
									"defaultValue": "App service plan",
									"toolTip": "Select 'Consumption' for serverless and event-driven scaling for the lowest minimum cost, 'Premium' for enterprise-level, serverless applications with event-based scaling and network isolation, or 'App Service Plan' for reusing compute from existing app service plan.",
									"constraints": {
										"required": false,
										"allowedValues": "[if(and(contains(first(map(filter(steps('basics').hosting.geoRegionsApi.value, (item) => equals(toLower(replace(item.name, ' ', '')), steps('basics').scope.location.name)), (item) => item.properties.orgDomain)), 'FLEXCONSUMPTION'), equals(steps('basics').functionAppKind, 'functionapp,linux')), parse('[{\"label\":\"Consumption (Serverless)\",\"description\":\"Optimized for serverless and event-driven workloads.\",\"value\":\"Consumption\"},{\"label\":\"Flex Consumption\",\"description\":\"Get high scalability with compute choices, virtual networking, and pay-as-you billing.\",\"value\":\"FlexConsumption\"},{\"label\":\"Functions Premium\",\"description\":\"Event based scaling and network isolation, ideal for workloads running continuously.\",\"value\":\"FunctionsPremium\"},{\"label\":\"App service plan\",\"description\":\"Fully isolated and dedicated environment suitable for workloads that need large SKUs or need to co-locate Web Apps and Functions.\",\"value\":\"AppServicePlan\"}]'),parse('[{\"label\":\"Consumption (Serverless)\",\"description\":\"Optimized for serverless and event-driven workloads.\",\"value\":\"Consumption\"},{\"label\":\"Functions Premium\",\"description\":\"Event based scaling and network isolation, ideal for workloads running continuously.\",\"value\":\"FunctionsPremium\"},{\"label\":\"App service plan\",\"description\":\"Fully isolated and dedicated environment suitable for workloads that need large SKUs or need to co-locate Web Apps and Functions.\",\"value\":\"AppServicePlan\"}]'))]"
									},
									"infoMessages": [],
									"visible": true
								},
								{
									"name": "newServerFarm",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Deploy a new a App Service Plan to host the Function App.",
									"defaultValue": "[if(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), 'Yes', 'No')]",
									"toolTip": "Select 'No' to use an existing server farm. The plans listed will be limited to those which are compatible with the runtime, operating system, and plan type selected.",
									"constraints": {
										"allowedValues": "[if(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), parse('[{\"label\":\"Yes\",\"value\":true}]'), parse('[{\"label\":\"Yes\",\"value\":true},{\"label\":\"No\",\"value\":false}]'))]",
										"required": true
									},
									"visible": "[not(equals(steps('basics').hosting.hostingPlanType, 'Consumption'))]"
								},
								{
									"name": "serverFarmsApi",
									"type": "Microsoft.Solutions.ArmApiControl",
									"request": {
										"method": "GET",
										"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Web/serverfarms?api-version=2022-03-01')]"
									}
								},								
								{
									"name": "existingServerFarmInfoBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, false), not(equals(steps('basics').hosting.hostingPlanType, 'Consumption')))]",
									"options": {
										"icon": "Info",
										"text": "The list of hosting plans below is filtered based on the location, operating system, and hosting plan type you chose above. If the list is empty, select a different operating system or plan type or choose to deploy a new Hosting plan which can also deploy additional resources such as virtual networks and private DNS zones depending on the options selected on the 'Networking' blade."
									}
								},
								{
									"name": "existingHostingPlanId",
									"type": "Microsoft.Common.DropDown",
									"label": "Existing App Service Plan",
									"multiLine": true,
									"toolTip": "Select the App Service Plan that will host the Function App.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('basics').hosting.serverFarmsApi.value, (item) => and(equals(toLower(replace(item.location, ' ', '')), steps('basics').scope.location.name), if(equals(steps('basics').hosting.hostingPlanType, 'FunctionsPremium'), and(contains(item.kind, 'elastic'), if(contains(steps('basics').functionAppKind, 'linux'), contains(item.properties.webSpace, 'Linux'), not(contains(item.properties.webSpace, 'Linux')))), if(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), equals(item.kind, 'functionapp'), if(contains(steps('basics').functionAppKind, 'linux'), equals(item.kind, 'linux'), equals(item.kind, 'app')))))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource Group: ', first(skip(split(item.id, '/'), 4)) , ', Sku: ', item.sku.name, ', ZoneRedundant: ', if(greater(item.properties.numberOfWorkers, 1), 'Yes', 'No'), '\",\"value\":\"', item.id, '\"}')))]"

									},
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, false), not(equals(steps('basics').hosting.hostingPlanType, 'Consumption')))]"
								},
								{
									"name": "newServerFarmInfoBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, true), not(equals(steps('basics').hosting.hostingPlanType, 'Consumption')))]",
									"options": {
										"icon": "Info",
										"text": "Enter the name of the new hosting plan and resource group below. The hosting plan and any new networking resources required will be deployed to this resource group."
									}
								},
								{
									"name": "hostingPlanName",
									"type": "Microsoft.Common.TextBox",
									"label": "App Service Plan name",
									"placeholder": "asp-func-app-<win/lnx>-<sku>-<env>-<region>",
									"toolTip": "The name of the app service plan used by the function App.",
									"constraints": {
										"required": true,
										"regex": "^[0-9a-zA-Z-\\p{L}]{1,60}$",
										"validationMessage": ""
									},
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, true), not(equals(steps('basics').hosting.hostingPlanType, 'Consumption')))]"
								},
								{
									"type": "Microsoft.Common.ResourceGroupSelector",
									"name": "hostingPlanResourceGroup",
									"allowedMode": "Both",
									"placeholder": "rg-<hostingPlanName> or rg-hosting-plans-<env>-<region>",
									"required": false,
									"defaultValue": "[steps('basics').functionAppResourceGroup.value.name]",
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
										"location": "[steps('basics').scope.location.name]"
									},
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, true), not(equals(steps('basics').hosting.hostingPlanType, 'Consumption')))]"
								},
								{
									"name": "hostingPlanPricing",
									"type": "Microsoft.Common.DropDown",
									"label": "App Service Plan pricing",
									"multiLine": true,
									"defaultValue": "[if(equals(steps('basics').hosting.hostingPlanType, 'FunctionsPremium'), 'Elastic Premium EP1', if(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), 'Flex Consumption FC1', 'PremiumV3 P0V3'))]",
									"toolTip": "Select the hosting plan pricing",
									"constraints": {
										"required": false,
										"allowedValues": "[if(equals(steps('basics').hosting.hostingPlanType, 'FunctionsPremium'), parse('[{\"label\":\"Elastic Premium EP1\",\"value\":\"ElasticPremium_EP1\"},{\"label\":\"Elastic Premium EP2\",\"value\":\"ElasticPremium_EP2\"},{\"label\":\"Elastic Premium EP3\",\"value\":\"ElasticPremium_EP3\"}]'), if(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), parse('[{\"label\":\"Flex Consumption FC1\",\"value\":\"FlexConsumption_FC1\"}]'), if(equals(steps('basics').functionAppKind, 'functionapp'), parse('[{\"label\":\"Free F1\",\"value\":\"Free_F1\"},{\"label\":\"Shared D1\",\"value\":\"Shared_D1\"},{\"label\":\"Basic B1\",\"value\":\"Basic_B1\"},{\"label\":\"Basic B2\",\"value\":\"Basic_B2\"},{\"label\":\"Basic B3\",\"value\":\"Basic_B3\"},{\"label\":\"PremiumV3 P0V3\",\"value\":\"PremiumV3_P0V3\"},{\"label\":\"PremiumV3 P1V3\",\"value\":\"PremiumV3_P1V3\"},{\"label\":\"PremiumV3 P2V3\",\"value\":\"PremiumV3_P2V3\"},{\"label\":\"PremiumV3 P3V3\",\"value\":\"PremiumV3_P3V3\"}]'), parse('[{\"label\":\"Free F1\",\"value\":\"Free_F1\"},{\"label\":\"Basic B1\",\"value\":\"Basic_B1\"},{\"label\":\"Basic B2\",\"value\":\"Basic_B2\"},{\"label\":\"Basic B3\",\"value\":\"Basic_B3\"},{\"label\":\"PremiumV3 P0V3\",\"value\":\"PremiumV3_P0V3\"},{\"label\":\"PremiumV3 P1V3\",\"value\":\"PremiumV3_P1V3\"},{\"label\":\"PremiumV3 P1mv3\",\"value\":\"PremiumV3_P1mv3\"},{\"label\":\"PremiumV3 P2V3\",\"value\":\"PremiumV3_P2V3\"},{\"label\":\"PremiumV3 P2mv3\",\"value\":\"PremiumV3_P2mv3\"},{\"label\":\"PremiumV3 P3V3\",\"value\":\"PremiumV3_P3V3\"},{\"label\":\"PremiumV3 P3mv3\",\"value\":\"PremiumV3_P3mv3\"},{\"label\":\"PremiumV3 P4mv3\",\"value\":\"PremiumV3_P4mv3\"},{\"label\":\"PremiumV3 P5mv3\",\"value\":\"PremiumV3_P5mv3\"}]'))))]"
									},
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, true), not(equals(steps('basics').hosting.hostingPlanType, 'Consumption')))]"
								},
								{
									"name": "zoneRedundancyTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, true), or(contains(steps('basics').hosting.hostingPlanPricing, 'Premium'), equals(steps('basics').hosting.hostingPlanPricing, 'FlexConsumption')), contains(first(map(filter(steps('basics').hosting.geoRegionsApi.value, (item) => equals(toLower(replace(item.name, ' ', '')), steps('basics').scope.location.name)), (item) => item.properties.orgDomain)), 'ZONEREDUNDANCY'))]",
									"options": {
										"text": "An App Service Plan can be deployed as a zone redundant service in the regions that support it. This is a deployment time only decision. You can't make an App Service Plan zone redundant after it has been deployed.",
										"link": {
											"label": "Learn more",
											"uri": "https://go.microsoft.com/fwlink/?linkid=2181427"
										}
									}
								},
								{
									"name": "zoneRedundant",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Zone redundancy",
									"defaultValue": "Disabled: Your App Service Plan and the apps in it will not be zone redundant. The minimum App Service plan instance count will be one.",
									"toolTip": "",
									"constraints": {
										"allowedValues": [
											{
												"label": "Enabled: Your App Service plan and the apps in it will be zone redundant. The minimum App Service plan instance count will be three.",
												"value": true
											},
											{
												"label": "Disabled: Your App Service Plan and the apps in it will not be zone redundant. The minimum App Service plan instance count will be one.",
												"value": false
											}
										]
									},
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, true), or(equals(steps('basics').hosting.hostingPlanPricing, 'FlexConsumption'), contains(steps('basics').hosting.hostingPlanPricing, 'Premium')), contains(first(map(filter(steps('basics').hosting.geoRegionsApi.value, (item) => equals(toLower(replace(item.name, ' ', '')), steps('basics').scope.location.name)), (item) => item.properties.orgDomain)), 'ZONEREDUNDANCY'))]"
								}
							],
							"visible": true
						}
					]
				},
				{
					"name": "storage",
					"label": "Storage",
					"elements": [
						{
							"name": "storageApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id, '/providers/Microsoft.Storage/storageAccounts?api-version=2021-04-01')]"
							}
						},
						{
							"name": "existingServerFarmApi",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').hosting.existingHostingPlanId, '?api-version=2022-03-01')]"
							}
						},
						{
							"name": "name_checkNameAvailability",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "POST",
								"path": "[concat(steps('basics').scope.subscription.id,'/providers/Microsoft.Storage/checkNameAvailability?api-version=2016-01-01')]",
								"body": {
									"name": "[steps('storage').name]",
									"type": "Microsoft.Storage/storageAccounts"
								}
							}
						},
						{
							"name": "name_rePUT",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Storage/storageAccounts/',steps('storage').name,'?api-version=2016-01-01')]",
								"body": {}
							}
						},
						{
							"name": "storageTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "When creating a function app, you must create or link to a general-purpose Azure Storage account that supports Blobs, Queue, and Table storage.",
								"link": {
									"label": "Learn more",
									"uri": "https://go.microsoft.com/fwlink/?linkid=2249771"
								}
							}
						},
						{
							"name": "newStorageAccount",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Create a new storage account",
							"defaultValue": "Yes",
							"toolTip": "Select 'Yes' to create a new storage account or 'No' to select an existing storage from the region where the function app will be deployed.",
							"constraints": {
								"required": false,
								"allowedValues": [
									{
										"label": "Yes",
										"value": true
									},
									{
										"label": "No, use an existing storage account",
										"value": false
									}
								]
							}
						},
						{
							"name": "name",
							"type": "Microsoft.Common.TextBox",
							"label": "Storage Account Name",
							"defaultValue": "[toLower(replace(replace(steps('basics').functionAppName, 'func-', 'st'), '-', ''))]",
							"toolTip": "Required. Name of the Storage Account.",
							"constraints": {
								"required": true,
								"validations": [
									{
										"isValid": "[or(steps('storage').name_checkNameAvailability.nameAvailable,equals(steps('storage').name_checkNameAvailability.reason,'AlreadyExists'))]",
										"message": "[steps('storage').name_checkNameAvailability.message]"
									},
									{
										"isValid": "[or(steps('storage').name_checkNameAvailability.nameAvailable,equals(steps('storage').name_rePUT.id,concat(steps('basics').scope.subscription.id,'/resourceGroups/',steps('basics').scope.resourceGroup.name,'/providers/Microsoft.Storage/storageAccounts/',steps('storage').name)),not(equals(steps('storage').name_checkNameAvailability.reason,'AlreadyExists')))]",
										"message": "[steps('storage').name_checkNameAvailability.message]"
									}
								]
							},
							"visible": "[steps('storage').newStorageAccount]"
						},
						{
							"name": "existingStorageTextBlock",
							"type": "Microsoft.Common.TextBlock",
							"visible": "[equals(steps('storage').newStorageAccount, false)]",
							"options": {
								"text": "The list of storage accounts below are filtered to only include those in the region selected on the 'Basics' pane and general purpose V2 types.",
								"link": {
									"label": "Learn more",
									"uri": "https://go.microsoft.com/fwlink/?linkid=2249771"
								}
							}
						},
						{
							"name": "exStorageNewHostPlanZRSInfoBox",
							"type": "Microsoft.Common.InfoBox",
							"visible": "[and(steps('basics').hosting.zoneRedundant, equals(steps('storage').newStorageAccount, false))]",
							"options": {
								"icon": "Info",
								"text": "In addition, since you chose to create a zone redundant Host Plan, the list of storage accounts is limited to the 'Standard_ZRS' sku.",
								"uri": "https://learn.microsoft.com/en-us/azure/azure-functions/storage-considerations?tabs=azure-cli#storage-account-requirements"
							}
						},
						{
							"name": "exStorageExHostPlanZRSInfoBox",
							"type": "Microsoft.Common.InfoBox",
							"visible": "[and(equals(steps('storage').existingServerFarmApi.properties.numberOfWorkers, 3), equals(steps('storage').newStorageAccount, false))]",
							"options": {
								"icon": "Info",
								"text": "In addition, since you chose an existing hosting plan that is zone redundant, the list of storage accounts is limited to the 'Standard_ZRS' sku.",
								"uri": "https://learn.microsoft.com/en-us/azure/azure-functions/storage-considerations?tabs=azure-cli#storage-account-requirements"
							}
						},
						{
							"name": "storageAccountId",
							"type": "Microsoft.Common.DropDown",
							"label": "Existing Storage Account",
							"placeholder": "Select Storage Account",
							"multiLine": true,
							"toolTip": "Select an existing storage account to use for the function app.",
							"constraints": {
								"allowedValues": "[map(filter(steps('storage').storageApi.value, (sa) => and(equals(sa.location, steps('basics').scope.location.name), equals(sa.kind, 'StorageV2'), if(steps('basics').hosting.newServerFarm, if(steps('basics').hosting.zoneRedundant, equals(sa.sku.name, 'Standard_ZRS'), true), if(equals(steps('storage').existingServerFarmApi.properties.numberOfWorkers, 3), equals(sa.sku.name, 'Standard_ZRS'), true)))), (sa) => parse(concat('{\"label\":\"', sa.name, '\",\"description\":\"Resource Group: ', first(skip(split(sa.id, '/'), 4)), ' , Sku: ', sa.sku.name,'\",\"value\":\"', sa.id, '\"}')))]",
								"required": true
							},
							"visible": "[equals(steps('storage').newStorageAccount, false)]"
						}
					]
				},
				{
					"name": "networking",
					"label": "Networking",
					"elements": [
						{
							"name": "faPrivateDnsZonesApi",
							"condition": "[not(empty(steps('networking').inboundAccess.PrivateDnsZonesSubscription))]",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').inboundAccess.PrivateDnsZonesSubscription, '/providers/Microsoft.Network/privateDnsZones?api-version=2018-09-01')]"
							}
						},
						{
							"name": "saPrivateDnsZonesApi",
							"condition": "[not(empty(steps('networking').storagePrivateEndpoints.PrivateDnsZonesSubscription))]",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').storagePrivateEndpoints.PrivateDnsZonesSubscription, '/providers/Microsoft.Network/privateDnsZones?api-version=2018-09-01')]"
							}
						},
						{
							"name": "virtualNetworksApi",
							"condition": "[not(empty(steps('networking').virtualNetwork.networksSubscription))]",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').virtualNetwork.networksSubscription, '/providers/Microsoft.Network/virtualNetworks?api-version=2022-11-01')]"
							}
						},
						{
							"name": "subnetsApi",
							"condition": "[not(empty(steps('networking').virtualNetwork.virtualNetwork))]",
							"type": "Microsoft.Solutions.ArmApiControl",
							"request": {
								"method": "GET",
								"path": "[concat(steps('networking').virtualNetwork.virtualNetwork, '/subnets?api-version=2022-05-01')]"
							}
						},
						{
							"name": "networkingTextBlock1",
							"type": "Microsoft.Common.TextBlock",
							"visible": true,
							"options": {
								"text": "Function Apps can be provisioned with the inbound address being public to the internet or isolated to an Azure virtual network. Function Apps can also be provisioned with outbound traffic able to reach endpoints in a virtual network, be governed by network security groups or affected by virtual network routes. By default, your app is open to the internet and cannot reach into a virtual network. These aspects can also be changed after the app is provisioned.",
								"link": {
									"label": "Learn more",
									"uri": "https://go.microsoft.com/fwlink/?linkid=2157533"
								}
							}
						},
						{
							"name": "publicAccess",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable public access",
							"defaultValue": "On",
							"toolTip": "Public access is applied to both main site and advanced tool site. Deny public network access will block all incoming traffic except that comes from private endpoints.",
							"constraints": {
								"required": false,
								"allowedValues": [
									{
										"label": "On",
										"value": true
									},
									{
										"label": "Off",
										"value": false
									}
								]
							}
						},
						{
							"name": "warningNetworkIntegrationNotAvailable",
							"type": "Microsoft.Common.InfoBox",
							"visible": "[equals(steps('basics').hosting.hostingPlanType, 'Consumption')]",
							"options": {
								"icon": "Warning",
								"text": "Network integration is only available in Flex Consumption, Functions Premium and Basic, Standard, Premium, Premium V2, Premium V3 Dedicated App Service plans.",
								"uri": "https://learn.microsoft.com/en-us/azure/azure-functions/functions-networking-options?tabs=azure-portal#matrix-of-networking-features"
							}
						},
						{
							"name": "networkInjection",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable network integration",
							"defaultValue": "[if(equals(steps('basics').hosting.hostingPlanType, 'Consumption'), 'No', 'Yes')]",
							"toolTip": "Allows your function app to attach to and/or access resources inside a virtual network.",
							"constraints": {
								"allowedValues": "[if(equals(steps('basics').hosting.hostingPlanType, 'Consumption'), parse('[{\"label\":\"No\",\"value\":false}]'), parse('[{\"label\":\"Yes\",\"value\":true},{\"label\":\"No\",\"value\":false}]'))]"
							},
							"visible": true
						},
						{
							"name": "virtualNetwork",
							"type": "Microsoft.Common.Section",
							"label": "Virtual Network",
							"elements": [
								{
									"name": "newVNet",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Deploy a new Virtual Network",
									"defaultValue": "[if(steps('basics').hosting.newServerFarm, 'Yes', 'No')]",
									"toolTip": "Choose 'Yes' to deploy a new virtual network for network injection/integration.",
									"constraints": {
										"allowedValues": "[if(steps('basics').hosting.newServerFarm, parse('[{\"label\":\"Yes\",\"value\":true},{\"label\":\"No\",\"value\":false}]'), parse('[{\"label\":\"No\",\"value\":false}]'))]"
									},
									"visible": true
								},
								{
									"name": "existingVNetExistingASPTextBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('basics').hosting.newServerFarm, false), not(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption')), equals(steps('networking').virtualNetwork.newVNet, false))]",
									"options": {
										"text": "[concat('Select the subscription and then the virtual network to which the existing App Service Plan (', last(split(steps('basics').hosting.existingHostingPlanId, '/')) ,') is already associated. You can find this information in the Networking | Virtual Networking Integration section of the App Service Plan.')]"
									}
								},
								{
									"name": "existingVNetNewASPTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), steps('basics').hosting.newServerFarm, equals(steps('networking').virtualNetwork.newVNet, false))]",
									"options": {
										"text": "Select the subscription and then the virtual network to which the new App Service Plan will be linked. The network listed must have a subnet delegated to 'Microsoft.App/environments' but not associated with an existing App Service Plan."
									}
								},
								{
									"name": "existingVNetNewASPTextBlock2",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(not(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption')), steps('basics').hosting.newServerFarm, equals(steps('networking').virtualNetwork.newVNet, false))]",
									"options": {
										"text": "Select the subscription and then the virtual network to which the new App Service Plan will be linked. The network listed must have a subnet delegated to 'Microsoft.Web/serverFarms' but not associated with an existing App Service Plan."
									}
								},
								{
									"name": "networksSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Networks Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\":\"', item.id, '\"}')))]",
										"required": true
									},
									"visible": "[equals(steps('networking').virtualNetwork.newVNet, false)]"
								},
								{
									"name": "virtualNetwork",
									"type": "Microsoft.Common.DropDown",
									"label": "Virtual Network",
									"multiLine": true,
									"toolTip": "Select the virtual network to which the function app will be integrated. All subnet selections below will be limited to this Virtual Network.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').virtualNetworksApi.value, (item) => equals(item.location, steps('basics').scope.location.name)), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									},
									"visible": "[equals(steps('networking').virtualNetwork.newVNet, false)]"
								},
								{
									"name": "newVNetTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[equals(steps('networking').virtualNetwork.newVNet, true)]",
									"options": {
										"text": "Specify the virtual network name, resource group, and virtual network address prefix to which the function app and new service plan will be integrated. All networking resources will be deployed to this resource group. Naming of the virtual network and resource group could be based on a shared model or specific to the app service plan deployed via this solution."
									}
								},
								{
									"name": "vnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Virtual Network Name",
									"subLabel": "",
									"placeholder": "vnet-functionapps-<env>-<region>",
									"toolTip": "Specify the name of the new Virtual Network to create for Function App Virtual Network Integration. This vnet and associated resources will be deployed to the resource group selected in the 'Hosting Plan' section of the 'Basics' blade.",
									"constraints": {
										"required": true,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,62}[a-zA-Z0-9_]?$",
										"validationMessage": "String value must be between 2 and 64 characters long, consist of only alphanumeric characters, underscores, periods, and hyphens. It must also start with an alphanumeric character and end with alphanumeric character or underscore."
									},
									"visible": "[steps('networking').virtualNetwork.newVNet]"
								},
								{
									"type": "Microsoft.Common.ResourceGroupSelector",
									"name": "networkingResourceGroup",
									"allowedMode": "Both",
									"placeholder": "<hosting plan rg name> or rg-functionapps-networking-<env>-<region>",
									"required": false,
									"label": "Networking Resource Group",
									"defaultValue": "[steps('basics').hosting.hostingPlanResourceGroup.value.name]",
									"scope": {
										"subscriptionId": "[steps('basics').scope.subscription.subscriptionId]",
										"location": "[steps('basics').scope.location.name]"
									},
									"visible": "[steps('networking').virtualNetwork.newVNet]"
								},
								{
									"name": "vnetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Vnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.0.0/16",
									"toolTip": "The address prefix of the virtual network used Virtual Network Integration provided in CIDR notation.",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[steps('networking').virtualNetwork.newVNet]"
								}
							],
							"visible": "[steps('networking').networkInjection]"
						},
						{
							"name": "inboundAccess",
							"type": "Microsoft.Common.Section",
							"label": "Inbound access",
							"elements": [
								{
									"name": "infoBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[steps('networking').publicAccess]",
									"options": {
										"icon": "Warning",
										"text": "Private endpoints are disabled if public internet access is enabled."
									}
								},
								{
									"name": "enablePE",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable private endpoints",
									"defaultValue": "[if(steps('networking').publicAccess, 'No', 'Yes')]",
									"toolTip": "Choose 'Yes' to enable private endpoints for the inbound access to the Function App.",
									"constraints": {
										"allowedValues": "[if(steps('networking').publicAccess, parse('[{\"label\":\"No\",\"value\":false}]'), parse('[{\"label\":\"Yes\",\"value\":true},{\"label\":\"No\",\"value\":false}]'))]"
									},
									"visible": true
								},
								{
									"name": "subnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Inbound subnet name",
									"placeholder": "",
									"defaultValue": "snet-functionapps-inbound",
									"toolTip": "Provide the name of the inbound subnet",
									"constraints": {
										"required": true,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,78}[a-zA-Z0-9_]$",
										"validationMessage": "Must be 2-80 characters long containing only alphanumeric characters, underscores, and hyphens. The first character must be an alphanumeric and the last an alphanumeric or underscore."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "snetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Subnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.0.0/24",
									"toolTip": "[concat('Provide the address prefix of the subnet used for inbound access in CIDR notation. The address range must be within the address range - ', steps('networking').virtualNetwork.vnetAddressPrefix)]",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "snetTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('networking').newVNet, false), steps('networking').inboundAccess.enablePE)]",
									"options": {
										"text": "Select a subnet in the chosen virtual network to which a private endpoint will be attached. Private endpoints enable secure inbound access from only the chosen virtual network. When enabled, your app will not be accessible from the internet. The list of subnets is filtered to only those that do not have service delegations and private endpoint network policies are disabled."
									}
								},
								{
									"name": "peSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Inbound subnet",
									"toolTip": "Select an existing subnet for the private Endpoints.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').subnetsApi.value, (item) => and(empty(item.properties.delegations), equals(item.properties.privateEndpointNetworkPolicies, 'Disabled'))), (item) => parse(concat('{\"label\":\"', item.name, '\",\"value\":\"', item.id, '\"}')))]"
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "deployPrivateDnsZone",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Deploy and link Private DNS Zone",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to deploy the Azure Web Sites private DNS Zone and link it to the new Virtual Network.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE)]"
								},								
								{
									"name": "enablePrivateDNS",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "DNS",
									"defaultValue": "Azure Private DNS Zone",
									"toolTip": "Choose 'Azure Private DNS Zone' to register the private endpoints with Azure Private DNS Zones.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Azure Private DNS Zone",
												"value": true
											},
											{
												"label": "Manual: I will provide my own custom DNS solution.",
												"value": false
											}
										]
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').inboundAccess.enablePE)]"
								},
								{
									"name": "PrivateDnsZonesSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private DNS Zones Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "Pick the subscription containing the Azure Private DNS Zones",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (item) => parse(concat('{\"label\":\"', item.displayName, '\",\"value\":\"', item.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(steps('networking').inboundAccess.enablePrivateDNS, equals(steps('networking').virtualNetwork.newVNet, false))]"
								},
								{
									"name": "privateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(steps('networking').inboundAccess.enablePrivateDNS, equals(steps('networking').virtualNetwork.newVNet, false))]",
									"label": "Private DNS Zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Function Apps.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').faPrivateDnsZonesApi.value, (item) => contains(item.name, 'privatelink.azurewebsites.')), (item) => parse(concat('{\"label\":\"', item.name, '\",\"description\":\"Resource group: ', first(skip(split(item.id, '/'), 4)), '\",\"value\":\"', item.id, '\"}')))]"
									}
								}
							],
							"visible": "[steps('networking').networkInjection]"
						},
						{
							"name": "outboundAccess",
							"type": "Microsoft.Common.Section",
							"label": "Outbound access",
							"elements": [
								{
									"name": "enableVNetIntegration",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable VNet Integration",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to  enable your app to make calls into a virtual network.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									},
									"visible": true
								},
								{
									"name": "subnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Outbound subnet name",
									"placeholder": "",
									"defaultValue": "[concat('snet-', steps('basics').functionAppName, '-outbound')]",
									"toolTip": "Provide the name of the outbound subnet",
									"constraints": {
										"required": true,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,78}[a-zA-Z0-9_]$",
										"validationMessage": "Must be 2-80 characters long containing only alphanumeric characters, underscores, and hyphens. The first character must be an alphanumeric and the last an alphanumeric or underscore."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVNetIntegration)]"
								},
								{
									"name": "snetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Subnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.1.0/24",
									"toolTip": "[concat('Provide the address prefix of the subnet used for outbound access in CIDR notation. The address range must be within the address range - ', steps('networking').virtualNetwork.vnetAddressPrefix)]",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVNetIntegration)]"
								},
								{
									"name": "snetExistingAspTextBlock2",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "Select the subnet in the chosen virtual network to be used for integration. VNet Integration enables your app to make calls into the chosen virtual network. You can also put network security groups or route tables on this subnet to control all outbound traffic from your function app. The list of subnets is automatically filtered to only those delegated and linked to the app service plan specified on the basics page."
									},
									"visible": "[and(not(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption')), equals(steps('basics').hosting.newServerFarm, false), equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').outboundAccess.enableVNetIntegration)]"
								},
								{
									"name": "wrongVnetExistingAspErrorBox",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(not(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption')), equals(steps('basics').hosting.newServerFarm, false), not(empty(steps('networking').virtualNetwork.virtualNetwork)), empty(map(filter(steps('networking').subnetsApi.value, (item) => equals(first(map(item.properties.serviceAssociationLinks, (item) => item.properties.link)), steps('basics').hosting.existingHostingPlanId)), (item) => item.name)))]",
									"options": {
										"icon": "Error",
										"text": "There are no subnets in the virtual network chosen above that have a link to the existing app service plan chosen on the 'Basics' page. Either select a different virtual network above, a different hosting plan on the 'Basics' page, or choose to deploy a new App Service Plan."
									}
								},
								{
									"name": "noSnetsWithDelegationErrorBox1",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), equals(steps('networking').virtualNetwork.newVNet, false), not(empty(steps('networking').virtualNetwork.virtualNetwork)), empty(map(filter(steps('networking').subnetsApi.value, (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.App/environments')), (item) => item.name)))]",
									"options": {
										"icon": "Error",
										"text": "There are no subnets in the virtual network chosen above that are delegated to the 'Microsoft.App/environments' service. You must either select another network, select the option to create a new virtual network, or create a subnet in the chosen virtual network, delegate it to 'Microsoft.App/environments', and then restart this deployment."
									}
								},
								{
									"name": "noSnetsWithDelegationErrorBox2",
									"type": "Microsoft.Common.InfoBox",
									"visible": "[and(not(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption')), steps('basics').hosting.newServerFarm, equals(steps('networking').virtualNetwork.newVNet, false), not(empty(steps('networking').virtualNetwork.virtualNetwork)), empty(map(filter(filter(steps('networking').subnetsApi.value, (snet) => empty(snet.properties.serviceAssociationLinks)), (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.Web/serverFarms')), (item) => item.name)))]",
									"options": {
										"icon": "Error",
										"text": "There are no subnets in the virtual network chosen above that are delegated to the 'Microsoft.Web/serverFarms' service and are not already linked to an App Service Plan. You must either select another network, select the option to create a new virtual network, or create a subnet in the chosen virtual network, delegate it to 'Microsoft.Web/serverFarms', and then restart this deployment."
									}
								},
								{
									"name": "outboundSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Outbound subnet",
									"defaultValue": "[map(filter(steps('networking').subnetsApi.value, (snet) => equals(first(map(snet.properties.serviceAssociationLinks, (snet) => snet.properties.link)), steps('basics').hosting.existingHostingPlanId)), (snet) => snet.name)]",
									"toolTip": "Select an existing subnet for outbound access.",
									"constraints": {
										"required": true,
										"allowedValues": "[if(equals(steps('basics').hosting.hostingPlanType, 'FlexConsumption'), map(filter(steps('networking').subnetsApi.value, (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.App/environments')), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}'))), if(equals(steps('basics').hosting.newServerFarm, false), map(filter(steps('networking').subnetsApi.value, (snet) => equals(first(map(snet.properties.serviceAssociationLinks, (snet) => snet.properties.link)), steps('basics').hosting.existingHostingPlanId)), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}'))), map(filter(filter(steps('networking').subnetsApi.value, (snet) => empty(snet.properties.serviceAssociationLinks)), (snet) => equals(first(map(snet.properties.delegations, (del) => del.properties.serviceName)), 'Microsoft.Web/serverFarms')), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))))]"
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').outboundAccess.enableVNetIntegration)]"
								}
							],
							"visible": "[steps('networking').networkInjection]"
						},
						{
							"name": "storagePrivateEndpoints",
							"type": "Microsoft.Common.Section",
							"label": "Storage Private Endpoints",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"options": {
										"text": "Configure private endpoints on your storage account to have tighter control over inbound traffic."
									}
								},
								{
									"name": "enablePE",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Add storage private endpoints",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to enable private endpoints on the storage account to have tighter control over inbound traffic.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									}
								},
								{
									"name": "subnetName",
									"type": "Microsoft.Common.TextBox",
									"label": "Storage account subnet name",
									"placeholder": "",
									"defaultValue": "snet-function-apps-storage",
									"toolTip": "Provide the name of the storage account private endpoint subnet",
									"constraints": {
										"required": true,
										"regex": "^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,78}[a-zA-Z0-9_]$",
										"validationMessage": "Must be 2-80 characters long containing only alphanumeric characters, underscores, and hyphens. The first character must be an alphanumeric and the last an alphanumeric or underscore."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "snetAddressPrefix",
									"type": "Microsoft.Common.TextBox",
									"label": "Subnet Address Prefix",
									"subLabel": "",
									"defaultValue": "10.0.2.0/24",
									"toolTip": "[concat('Provide the address prefix of the subnet used for inbound access in CIDR notation. The address range must be within the address range - ', steps('networking').virtualNetwork.vnetAddressPrefix)]",
									"constraints": {
										"required": false,
										"regex": "^(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\/(1[0-9]|2[0-6]))$",
										"validationMessage": "Invalid CIDR range. The address prefix must be in the range [10,26]."
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "deployPrivateDnsZone",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Deploy and link Private DNS Zones",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to deploy the Azure blob, file, queue, and table storage private DNS Zones and link them to the new Virtual Network.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									},
									"visible": "[and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE)]"
								},								
								{
									"name": "snetTextBlock",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE)]",
									"options": {
										"text": "Select a subnet in the chosen virtual network to place the storage account private endpoints. The subnet list is automatically filtered to only those that do not have a delegation."
									}
								},
								{
									"name": "peSubnet",
									"type": "Microsoft.Common.DropDown",
									"label": "Private endpoint subnet",
									"toolTip": "Select an existing subnet for the storage account private endpoints.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').subnetsApi.value, (snet) => and(empty(snet.properties.delegations), equals(snet.properties.privateEndpointNetworkPolicies, 'Disabled'))), (snet) => parse(concat('{\"label\":\"', snet.name, '\",\"value\":\"', snet.id, '\"}')))]"
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "enablePrivateDNS",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "DNS",
									"defaultValue": "Azure Private DNS Zone",
									"toolTip": "Choose 'Azure Private DNS Zone' to register the private endpoints with Azure Private DNS Zones.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Azure Private DNS Zone",
												"value": true
											},
											{
												"label": "Manual: I will provide my own custom DNS solution.",
												"value": false
											}
										]
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE)]"
								},
								{
									"name": "PrivateDnsZonesSubscription",
									"type": "Microsoft.Common.DropDown",
									"label": "Private DNS Zones Subscription",
									"placeholder": "",
									"defaultValue": "[steps('basics').scope.subscription.displayName]",
									"toolTip": "Pick the subscription containing the Azure Private DNS Zones",
									"constraints": {
										"allowedValues": "[map(steps('basics').subscriptionsApi.value, (sub) => parse(concat('{\"label\":\"', sub.displayName, '\",\"value\":\"', sub.id, '\"}')))]",
										"required": true
									},
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]"
								},
								{
									"name": "blobPrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage blobs private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Blobs.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (dnsZone) => contains(dnsZone.name, 'privatelink.blob.')), (dnsZone) => parse(concat('{\"label\":\"', dnsZone.name, '\",\"description\":\"Resource group: ', first(skip(split(dnsZone.id, '/'), 4)), '\",\"value\":\"', dnsZone.id, '\"}')))]"
									}
								},
								{
									"name": "filePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage files private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Files.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (dnsZone) => contains(dnsZone.name, 'privatelink.file.')), (dnsZone) => parse(concat('{\"label\":\"', dnsZone.name, '\",\"description\":\"Resource group: ', first(skip(split(dnsZone.id, '/'), 4)), '\",\"value\":\"', dnsZone.id, '\"}')))]"
									}
								},
								{
									"name": "queuePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage queues private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Queues.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (dnsZone) => contains(dnsZone.name, 'privatelink.queue.')), (dnsZone) => parse(concat('{\"label\":\"', dnsZone.name, '\",\"description\":\"Resource group: ', first(skip(split(dnsZone.id, '/'), 4)), '\",\"value\":\"', dnsZone.id, '\"}')))]"
									}
								},
								{
									"name": "tablePrivateDnsZone",
									"type": "Microsoft.Common.DropDown",
									"visible": "[and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS)]",
									"label": "Storage tables private DNS zone",
									"defaultValue": "",
									"multiLine": true,
									"toolTip": "Select the existing Private DNS Zone for Azure Tables.",
									"constraints": {
										"required": true,
										"allowedValues": "[map(filter(steps('networking').saPrivateDnsZonesApi.value, (dnsZone) => contains(dnsZone.name, 'privatelink.table.')), (dnsZone) => parse(concat('{\"label\":\"', dnsZone.name, '\",\"description\":\"Resource group: ', first(skip(split(dnsZone.id, '/'), 4)), '\",\"value\":\"', dnsZone.id, '\"}')))]"
									}
								}
							],
							"visible": "[and(steps('networking').networkInjection, steps('networking').outboundAccess.enableVNetIntegration)]"
						}
					]
				},
				{
					"name": "monitoring",
					"label": "Monitoring",
					"elements": [
						{
							"name": "diagnostics",
							"type": "Microsoft.Common.Section",
							"label": "Diagnostics",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Most resources in Azure have the ability to send diagnostic log and metrics to a log analytic workspace for retrieval and analysis. To enable diagnostic collection from the resources deployed, select the log analytics workspace below. Leave it empty to disable log and metric collection."
									}
								},
								{
									"name": "enableDiagnostics",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable Diagnostic Settings",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to enable diagnostic settings.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									}
								},
								{
									"name": "logAnalyticsWorkspace",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Log Analytics Workspace",
									"resourceType": "Microsoft.OperationalInsights/workspaces",
									"toolTip": "The log analytics workspace to where diagnostic logs are sent.",
									"visible": "[steps('monitoring').diagnostics.enableDiagnostics]"
								}
							],
							"visible": true
						},
						{
							"name": "appInsights",
							"type": "Microsoft.Common.Section",
							"label": "Application Insights",
							"elements": [
								{
									"name": "textBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": true,
									"options": {
										"text": "Azure Monitor application insights is an Application Performance Management (APM) service for developers and DevOps professionals. Enable it below to automatically monitor your application. It will detect performance anomalies, and includes powerful analytics tools to help you diagnose issues and to understand what users actually do with your app. Your bill is based on amount of data used by Application Insights and your data retention settings.",
										"link": {
											"label": "Learn more",
											"uri": "https://go.microsoft.com/fwlink/?linkid=2087013"
										}
									}
								},
								{
									"name": "enableApplicationInsights",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Enable Application Insights",
									"defaultValue": "Yes",
									"toolTip": "Choose 'Yes' to enable application insights.",
									"constraints": {
										"allowedValues": [
											{
												"label": "Yes",
												"value": true
											},
											{
												"label": "No",
												"value": false
											}
										]
									}
								},
								{
									"name": "privateLinkTextBlock1",
									"type": "Microsoft.Common.TextBlock",
									"visible": "[steps('monitoring').appInsights.enableApplicationInsights]",
									"options": {
										"text": "Azure Monitor is a constellation of different interconnected services that work together to monitor your workloads. An Azure Monitor private link connects a private endpoint to a set of Azure Monitor resources to define the boundaries of your monitoring network. That set is called an Azure Monitor Private Link Scope (AMPLS).",
										"link": {
											"label": "Use Azure Private Link to connect networks to Azure Monitor - Azure Monitor | Microsoft Learn",
											"uri": "https://learn.microsoft.com/en-us/azure/azure-monitor/logs/private-link-security"
										}
									}
								},
								{
									"name": "privateLink",
									"type": "Microsoft.Common.CheckBox",
									"label": "Attach AVD monitoring resources to an existing Azure Monitor Private Link Scope",
									"visible": "[steps('monitoring').appInsights.enableApplicationInsights]"
								},
								{
									"name": "azureMonitorPrivateLinkScope",
									"type": "Microsoft.Solutions.ResourceSelector",
									"label": "Azure Monitor Private Link Scope",
									"resourceType": "Microsoft.Insights/privateLinkScopes",
									"constraints": {
										"required": true
									},
									"visible": "[steps('monitoring').appInsights.privateLink]"
								}
							]
						}
					]
				},
				{
					"name": "tags",
					"label": "Tags",
					"elements": [
						{
							"name": "tags",
							"type": "Microsoft.Common.TagsByResource",
							"resources": [
								"Microsoft.Insights/components",
								"Microsoft.Network/privateEndpoints",
								"Microsoft.Network/privateDnsZones",
								"Microsoft.Network/virtualNetworks",
								"Microsoft.Storage/storageAccounts",
								"Microsoft.Web/sites",
								"Microsoft.Web/serverFarms"
							]
						}
					]
				}
			]
		},
		"outputs": {
			"kind": "Subscription",
			"location": "[steps('basics').scope.location.name]",
			"subscriptionId": "[steps('basics').scope.subscription.id]",
			"parameters": {
				"location": "[steps('basics').scope.location.name]",
				"nameConvResTypeAtEnd": "[bool(steps('basics').nameConvResTypeAtEnd)]",
				"functionAppName": "[steps('basics').functionAppName]",
				"functionAppResourceGroupName": "[steps('basics').functionAppResourceGroup.value.name]",
				"functionAppKind": "[steps('basics').functionAppKind]",
				"runtimeStack": "[steps('basics').runtimeStackName]",
				"runtimeVersion": "[steps('basics').runtimeStackMinorVersion]",
				"deployHostingPlan": "[if(equals(steps('basics').hosting.hostingPlanType, 'Consumption'), false, steps('basics').hosting.newServerFarm)]",
				"hostingPlanType": "[if(steps('basics').hosting.newServerFarm, steps('basics').hosting.hostingPlanType, '')]",
				"hostingPlanId": "[if(steps('basics').hosting.newServerFarm, '', steps('basics').hosting.existingHostingPlanId)]",
				"hostingPlanName": "[if(steps('basics').hosting.newServerFarm, steps('basics').hosting.hostingPlanName, '')]",
				"hostingPlanResourceGroupName": "[if(steps('basics').hosting.newServerFarm, steps('basics').hosting.hostingPlanResourceGroup.value.name, '')]",
				"hostingPlanPricing": "[if(steps('basics').hosting.newServerFarm, steps('basics').hosting.hostingPlanPricing, '')]",
				"hostingPlanZoneRedundant": "[if(steps('basics').hosting.newServerFarm, steps('basics').hosting.zoneRedundant, false)]",
				"deployStorageAccount": "[steps('storage').newStorageAccount]",
				"storageAccountId": "[if(equals(steps('storage').newStorageAccount, false), steps('storage').storageAccountId, '')]",
				"storageAccountName": "[if(steps('storage').newStorageAccount, steps('storage').name, '')]",
				"enablePublicAccess": "[steps('networking').publicAccess]",
				"deployNetworking": "[if(steps('networking').networkInjection, steps('networking').virtualNetwork.newVNet, false)]",
				"enableInboundPrivateEndpoint": "[steps('networking').inboundAccess.enablePE]",				
				"enableVNetIntegration": "[if(steps('networking').networkInjection, steps('networking').outboundAccess.enableVNetIntegration, false)]",
				"functionAppInboundSubnetId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').inboundAccess.enablePE), steps('networking').inboundAccess.peSubnet, '')]",
				"functionAppOutboundSubnetId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').outboundAccess.enableVNetIntegration), steps('networking').outboundAccess.outboundSubnet, '')]",
				"enableStoragePrivateEndpoints": "[if(and(steps('networking').networkInjection, steps('networking').outboundAccess.enableVNetIntegration), steps('networking').storagePrivateEndpoints.enablePE, false)]",
				"storagePrivateEndpointSubnetId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE), steps('networking').storagePrivateEndpoints.peSubnet, '')]",
				"vnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').networkInjection), steps('networking').virtualNetwork.vnetName, '')]",
				"networkingResourceGroupName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').networkInjection), steps('networking').virtualNetwork.networkingResourceGroup.value.name, '')]",
				"vnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').networkInjection), steps('networking').virtualNetwork.vnetAddressPrefix, '')]",
				"functionAppInboundSubnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE), steps('networking').inboundAccess.subnetName, '')]",
				"functionAppInboundSubnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE), steps('networking').inboundAccess.snetAddressPrefix, '')]",
				"deployFunctionAppDnsZone": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').inboundAccess.enablePE), steps('networking').inboundAccess.deployPrivateDnsZone, false)]",
				"functionAppOutboundSubnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVNetIntegration), steps('networking').outboundAccess.subnetName, '')]",
				"functionAppOutboundSubnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').outboundAccess.enableVNetIntegration), steps('networking').outboundAccess.snetAddressPrefix, '')]",
				"storagePrivateEndpointSubnetName": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE), steps('networking').storagePrivateEndpoints.subnetName, '')]",
				"storagePrivateEndpointSubnetAddressPrefix": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE), steps('networking').storagePrivateEndpoints.snetAddressPrefix, '')]",
				"deployStoragePrivateDnsZones": "[if(and(steps('networking').virtualNetwork.newVNet, steps('networking').storagePrivateEndpoints.enablePE), steps('networking').storagePrivateEndpoints.deployPrivateDnsZone, false)]",
				"functionAppPrivateDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), equals(steps('networking').publicAccess, false), steps('networking').inboundAccess.enablePE, steps('networking').inboundAccess.enablePrivateDNS), steps('networking').inboundAccess.privateDnsZone, '')]",
				"storageBlobDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.blobPrivateDnsZone, '')]",
				"storageFileDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.filePrivateDnsZone, '')]",
				"storageQueueDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.queuePrivateDnsZone, '')]",
				"storageTableDnsZoneId": "[if(and(equals(steps('networking').virtualNetwork.newVNet, false), steps('networking').storagePrivateEndpoints.enablePE, steps('networking').storagePrivateEndpoints.enablePrivateDNS), steps('networking').storagePrivateEndpoints.tablePrivateDnsZone, '')]",
				"logAnalyticsWorkspaceId": "[if(equals(steps('monitoring').diagnostics.enableDiagnostics, true), steps('monitoring').diagnostics.logAnalyticsWorkspace.id, '')]",
				"enableApplicationInsights": "[steps('monitoring').appInsights.enableApplicationInsights]",
				"privateLinkScopeResourceId": "[if(steps('monitoring').appInsights.privateLink, steps('monitoring').appInsights.azureMonitorPrivateLinkScope.id, '')]",
				"tags": "[steps('tags').tags]"
			}
		}
	}
}