{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.31.34.60546",
      "templateHash": "14223913062925815738"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location of all resources deployed by this template."
      }
    },
    "nameConvResTypeAtEnd": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Reverse the order of the resource type and name in the generated resource name. Default is false."
      }
    },
    "functionAppName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the function App."
      }
    },
    "functionAppResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the resource group where the function App will be deployed."
      }
    },
    "functionAppKind": {
      "type": "string",
      "defaultValue": "functionapp,linux",
      "allowedValues": [
        "functionapp",
        "functionapp,linux"
      ],
      "metadata": {
        "description": "Optional. The type of site to deploy"
      }
    },
    "runtimeStack": {
      "type": "string",
      "defaultValue": "dotnet",
      "allowedValues": [
        "dotnet",
        "java",
        "node",
        "powershell",
        "python"
      ],
      "metadata": {
        "description": "Optional. The runtime stack used by the function App."
      }
    },
    "runtimeVersion": {
      "type": "string",
      "defaultValue": ".NET 8 Isolated",
      "metadata": {
        "description": "Optional. The version of the runtime stack used by the function App. The version must be compatible with the runtime stack."
      }
    },
    "flexConsumptionInstanceMemoryMB": {
      "type": "int",
      "defaultValue": 2048,
      "allowedValues": [
        2048,
        4096
      ],
      "metadata": {
        "description": "Optional. Determines the memory size of the instances on which your app runs in the FlexConsumption hosting plan."
      }
    },
    "flexConsumptionMaximumInstanceCount": {
      "type": "int",
      "defaultValue": 100,
      "minValue": 40,
      "maxValue": 1000,
      "metadata": {
        "description": "Optional. The maximum number of instances that the function App can scale out to in the FlexConsumption hosting plan."
      }
    },
    "deployHostingPlan": {
      "type": "bool",
      "metadata": {
        "description": "Required. Determines whether or not a new host plan is deployed. If set to false and the host plan type is not \"Consumption\", then the \"hostingPlanId\" parameter must be provided."
      }
    },
    "hostingPlanType": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "Consumption",
        "FlexConsumption",
        "FunctionsPremium",
        "AppServicePlan",
        ""
      ],
      "metadata": {
        "description": "Conditional. When you create a function app in Azure, you must choose a hosting plan for your app.\nThere are three basic Azure Functions hosting plans provided by Azure Functions: Consumption plan, Premium plan, and Dedicated (App Service) plan. \n* Consumption: Scale automatically and only pay for compute resources when your functions are running.\n* FlexConsumption: Flex Consumption is a Linux-based Azure Functions hosting plan that builds on the Consumption pay for what you use serverless billing model. It gives you more flexibility and customizability by introducing private networking, instance memory size selection, and fast/large scale-out features still based on a serverless model.\n* FunctionsPremium: Automatically scales based on demand using pre-warmed workers, which run applications with no delay after being idle, runs on more powerful instances, and connects to virtual networks.\n* AppServicePlan: Best for long-running scenarios where Durable Functions can't be used. Consider an App Service plan in the following situations:\n  * You have existing, underutilized VMs that are already running other App Service instances.\n  * Predictive scaling and costs are required.\n"
      }
    },
    "hostingPlanId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the existing server farm to use for the function App. Required when \"deployHostingPlan\" is set to false and hostingPlanType is not set to \"Consumption\"."
      }
    },
    "hostingPlanName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the service plan used by the function App. Required when \"deployHostingPlan\" is set to true and hostingPlanType is not set to \"Consumption\"."
      }
    },
    "hostingPlanResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the resource Group where the hosting plan will be deployed. Required when \"deployHostingPlan\" is set to true and hostingPlanType is not set to \"Consumption\"."
      }
    },
    "hostingPlanPricing": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "ElasticPremium_EP1",
        "ElasticPremium_EP2",
        "ElasticPremium_EP3",
        "FlexConsumption_FC1",
        "Free_F1",
        "Basic_B1",
        "Basic_B2",
        "Basic_B3",
        "PremiumV3_P0V3",
        "PremiumV3_P1V3",
        "PremiumV3_P1mv3",
        "PremiumV3_P2V3",
        "PremiumV3_P2mv3",
        "PremiumV3_P3V3",
        "PremiumV3_P3mv3",
        "PremiumV3_P4mv3",
        "PremiumV3_P5mv3",
        "Shared_D1",
        ""
      ],
      "metadata": {
        "description": "Conditional. The hosting plan pricing plan. Required when \"deployHostingPlan\" is set to true and hostingPlanType is not set to \"Consumption\"."
      }
    },
    "hostingPlanZoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Determines if the hosting plan is zone redundant. Not used when \"hostingPlanId\" is provided or hostingPlanType is set to \"Consumption\"."
      }
    },
    "deployStorageAccount": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines whether an existing storage account is used or a new one is deployed. If set to true, the \"storageAccountName\" parameter must be provided. If set to false, the \"storageAccountId\" parameter must be provided."
      }
    },
    "storageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the existing storage account to be used with the logic app. Required when \"deployStorageAccount\" is set to false."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the storage account used by the function App. Required if \"deployStorageAccount\" is set to true."
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable Application Insights for the function App."
      }
    },
    "privateLinkScopeResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Associate the applications insights with an Azure Monitor Private Link Scope. Used only when enableApplicationInsights is set to true."
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. To enable diagnostics settings, provide the resource Id of the Log Analytics workspace where logs are to be sent."
      }
    },
    "enablePublicAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether the function App should be accessible from the public network."
      }
    },
    "enableInboundPrivateEndpoint": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether the function App should be accessible via a private endpoint."
      }
    },
    "enableVnetIntegration": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether outbound traffic from the function App should be routed over a vnet."
      }
    },
    "deployNetworking": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether a new Vnet and associated resources should be deployed to support the hosting plan and function app."
      }
    },
    "deployFunctionAppPrivateDnsZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether private DNS zones should be created for the function App."
      }
    },
    "deployStoragePrivateDnsZones": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether private DNS zones should be created for the storage account."
      }
    },
    "functionAppInboundSubnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the subnet used by the function App for inbound traffic. Required when \"enableInboundPrivateEndpoint\" is set to true and \"deployNetworking\" is set to false."
      }
    },
    "functionAppOutboundSubnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The resource Id of the subnet used by the function App for outbound traffic. Required when \"enableVnetIntegration\" is set to true and \"deployNetworking\" is set to false."
      }
    },
    "storagePrivateEndpointSubnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional The resource Id of the private Endpoint Subnet. Required when \"enableStoragePrivateEndpoints\" is set to true and \"deployNetworking\" is set to false."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the virtual network used for Virtual Network Integration. Required when \"enableVnetIntegration\" is set to true and \"deployNetworking\" = true."
      }
    },
    "networkingResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Conditional. The name of the resource group where the virtual network is deployed. Required when \"enableVnetIntegration\" is set to true and \"deployNetworking\" = true."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Optional. The address prefix of the virtual network used Virtual Network Integration."
      }
    },
    "functionAppOutboundSubnetName": {
      "type": "string",
      "defaultValue": "fa-outbound-subnet",
      "metadata": {
        "description": "Optional. The name of the subnet used by the function App for Virtual Network Integration. Used when \"enableVnetIntegration\" is set to true and \"deployNetworking\" = true."
      }
    },
    "functionAppOutboundSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Optional. The address prefix of the subnet used by the function App for Virtual Network Integration. Used when \"enableVnetIntegration\" is set to true and \"deployNetworking\" = true."
      }
    },
    "enableStoragePrivateEndpoints": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Determines whether private endpoints are used on the function app storage account. Used when \"enableVnetIntegration\" is set to true."
      }
    },
    "storagePrivateEndpointSubnetName": {
      "type": "string",
      "defaultValue": "storage-subnet",
      "metadata": {
        "description": "Optional. The name of the subnet used for private Endpoints. Used when \"enableVnetIntegration\", \"enableStoragePrivateEndpoints\", and \"deployNetworking\" are all set to  \"true\"."
      }
    },
    "storagePrivateEndpointSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Optional. The address prefix of the subnet used for private Endpoints. Used when \"enableVnetIntegration\", \"enableStoragePrivateEndpoints\", and \"deployNetworking\" are all set to  \"true\"."
      }
    },
    "functionAppInboundSubnetName": {
      "type": "string",
      "defaultValue": "fa-inbound-subnet",
      "metadata": {
        "description": "Optional. The name of the subnet used by the function App for inbound access when public access is disabled. Used when \"enableInboundPrivateEndpoint\" and \"deployNetworking\" = true."
      }
    },
    "functionAppInboundSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.2.0/24",
      "metadata": {
        "description": "Optional. The address prefix of the subnet used by the function App for inbound access when public access is disabled. Used when \"enableInboundPrivateEndpoint\" and \"deployNetworking\" = true."
      }
    },
    "functionAppPrivateDnsZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the function app private DNS Zone. Required when \"enableInboundPrivateEndpoint\" = true and \"deployNetworking\" = false."
      }
    },
    "storageBlobDnsZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the blob storage Private DNS Zone. Required when \"enableVnetIntegration\" and \"enableStoragePrivateEndpoints\" = true and \"deployNetworking = false."
      }
    },
    "storageFileDnsZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the file storage Private DNS Zone. Required when \"enableVnetIntegration\" and \"enableStoragePrivateEndpoints\" = true and \"deployNetworking = false."
      }
    },
    "storageQueueDnsZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the queue storage Private DNS Zone. Required when \"enableVnetIntegration\" and \"enableStoragePrivateEndpoints\" = true and \"deployNetworking = false."
      }
    },
    "storageTableDnsZoneId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource Id of the table storage Private DNS Zone. Required when \"enableVnetIntegration\" and \"enableStoragePrivateEndpoints\" = true and \"deployNetworking = false."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The tags to be assigned to the resources deployed by this template.\nMust be provided in the following 'TagsByResource' format: (JSON)\n{\n  \"Microsoft.Storage/storageAccounts\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  \"Microsoft.Web/sites\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  \"Microsoft.Web/serverfarms\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  {\n    \"Microsoft.Network/privateEndpoints\" : {\n      \"key1\": \"value1\",\n      \"key2\": \"value2\"\n    }\n  },\n  {\n    \"Microsoft.Network/virtualNetworks\" : {\n      \"key1\": \"value1\",\n      \"key2\": \"value2\"\n    }\n  }\n}\n"
      }
    },
    "timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddhhmmss')]",
      "metadata": {
        "description": "Do not change. Used for deployment naming."
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "AzureChina": {
        "chinaeast": {
          "abbreviation": "cne",
          "recoveryServicesGeo": "sha",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinaeast2": {
          "abbreviation": "cne2",
          "recoveryServicesGeo": "sha2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth": {
          "abbreviation": "cnn",
          "recoveryServicesGeo": "bjb",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "chinanorth2": {
          "abbreviation": "cnn2",
          "recoveryServicesGeo": "bjb2",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        }
      },
      "AzureCloud": {
        "australiacentral": {
          "abbreviation": "auc",
          "recoveryServicesGeo": "acl",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiacentral2": {
          "abbreviation": "auc2",
          "recoveryServicesGeo": "acl2",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiaeast": {
          "abbreviation": "aue",
          "recoveryServicesGeo": "ae",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "australiasoutheast": {
          "abbreviation": "ause",
          "recoveryServicesGeo": "ase",
          "timeDifference": "+10:00",
          "timeZone": "AUS Eastern Standard Time"
        },
        "brazilsouth": {
          "abbreviation": "brs",
          "recoveryServicesGeo": "brs",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "brazilsoutheast": {
          "abbreviation": "brse",
          "recoveryServicesGeo": "bse",
          "timeDifference": "-3:00",
          "timeZone": "E. South America Standard Time"
        },
        "canadacentral": {
          "abbreviation": "cac",
          "recoveryServicesGeo": "cnc",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "canadaeast": {
          "abbreviation": "cae",
          "recoveryServicesGeo": "cne",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "centralindia": {
          "abbreviation": "inc",
          "recoveryServicesGeo": "inc",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "centralus": {
          "abbreviation": "usc",
          "recoveryServicesGeo": "cus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "eastasia": {
          "abbreviation": "ase",
          "recoveryServicesGeo": "ea",
          "timeDifference": "+8:00",
          "timeZone": "China Standard Time"
        },
        "eastus": {
          "abbreviation": "use",
          "recoveryServicesGeo": "eus",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "eastus2": {
          "abbreviation": "use2",
          "recoveryServicesGeo": "eus2",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "francecentral": {
          "abbreviation": "frc",
          "recoveryServicesGeo": "frc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "francesouth": {
          "abbreviation": "frs",
          "recoveryServicesGeo": "frs",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanynorth": {
          "abbreviation": "den",
          "recoveryServicesGeo": "gn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "germanywestcentral": {
          "abbreviation": "dewc",
          "recoveryServicesGeo": "gwc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "israelcentral": {
          "abbreviation": "ilc",
          "recoveryServicesGeo": "ilc",
          "timeDifference": "+2:00",
          "timeZone": "Israel Standard Time"
        },
        "italynorth": {
          "abbreviation": "itn",
          "recoveryServicesGeo": "itn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "japaneast": {
          "abbreviation": "jpe",
          "recoveryServicesGeo": "jpe",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "japanwest": {
          "abbreviation": "jpw",
          "recoveryServicesGeo": "jpw",
          "timeDifference": "+9:00",
          "timeZone": "Tokyo Standard Time"
        },
        "jioindiacentral": {
          "abbreviation": "injc",
          "recoveryServicesGeo": "jic",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "jioindiawest": {
          "abbreviation": "injw",
          "recoveryServicesGeo": "jiw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "koreacentral": {
          "abbreviation": "krc",
          "recoveryServicesGeo": "krc",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "koreasouth": {
          "abbreviation": "krs",
          "recoveryServicesGeo": "krs",
          "timeDifference": "+9:00",
          "timeZone": "Korea Standard Time"
        },
        "northcentralus": {
          "abbreviation": "usnc",
          "recoveryServicesGeo": "ncus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "northeurope": {
          "abbreviation": "eun",
          "recoveryServicesGeo": "ne",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "norwayeast": {
          "abbreviation": "noe",
          "recoveryServicesGeo": "nwe",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "norwaywest": {
          "abbreviation": "now",
          "recoveryServicesGeo": "nww",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "polandcentral": {
          "abbreviation": "plc",
          "recoveryServicesGeo": "plc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "qatarcentral": {
          "abbreviation": "qac",
          "recoveryServicesGeo": "qac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "southafricanorth": {
          "abbreviation": "zan",
          "recoveryServicesGeo": "san",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southafricawest": {
          "abbreviation": "zaw",
          "recoveryServicesGeo": "saw",
          "timeDifference": "+2:00",
          "timeZone": "South Africa Standard Time"
        },
        "southcentralus": {
          "abbreviation": "ussc",
          "recoveryServicesGeo": "scus",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "southeastasia": {
          "abbreviation": "asse",
          "recoveryServicesGeo": "sea",
          "timeDifference": "+8:00",
          "timeZone": "Singapore Standard Time"
        },
        "southindia": {
          "abbreviation": "ins",
          "recoveryServicesGeo": "ins",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "swedencentral": {
          "abbreviation": "sec",
          "recoveryServicesGeo": "sdc",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandnorth": {
          "abbreviation": "chn",
          "recoveryServicesGeo": "szn",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "switzerlandwest": {
          "abbreviation": "chw",
          "recoveryServicesGeo": "szw",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "uaecentral": {
          "abbreviation": "aec",
          "recoveryServicesGeo": "uac",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uaenorth": {
          "abbreviation": "aen",
          "recoveryServicesGeo": "uan",
          "timeDifference": "+3:00",
          "timeZone": "Arabian Standard Time"
        },
        "uksouth": {
          "abbreviation": "uks",
          "recoveryServicesGeo": "uks",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "ukwest": {
          "abbreviation": "ukw",
          "recoveryServicesGeo": "ukw",
          "timeDifference": "0:00",
          "timeZone": "GMT Standard Time"
        },
        "westcentralus": {
          "abbreviation": "uswc",
          "recoveryServicesGeo": "wcus",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "westeurope": {
          "abbreviation": "euw",
          "recoveryServicesGeo": "we",
          "timeDifference": "+1:00",
          "timeZone": "Central Europe Standard Time"
        },
        "westindia": {
          "abbreviation": "inw",
          "recoveryServicesGeo": "inw",
          "timeDifference": "+5:30",
          "timeZone": "India Standard Time"
        },
        "westus": {
          "abbreviation": "usw",
          "recoveryServicesGeo": "wus",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus2": {
          "abbreviation": "usw2",
          "recoveryServicesGeo": "wus2",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        },
        "westus3": {
          "abbreviation": "usw3",
          "recoveryServicesGeo": "wus3",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        }
      },
      "AzureUSGovernment": {
        "usdodcentral": {
          "abbreviation": "dodc",
          "recoveryServicesGeo": "udc",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usdodeast": {
          "abbreviation": "dode",
          "recoveryServicesGeo": "ude",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usgovarizona": {
          "abbreviation": "az",
          "recoveryServicesGeo": "uga",
          "timeDifference": "-7:00",
          "timeZone": "Mountain Standard Time"
        },
        "usgovtexas": {
          "abbreviation": "tx",
          "recoveryServicesGeo": "ugt",
          "timeDifference": "-6:00",
          "timeZone": "Central Standard Time"
        },
        "usgovvirginia": {
          "abbreviation": "va",
          "recoveryServicesGeo": "ugv",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        }
      },
      "USNat": {
        "usnateast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "exe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "usnatwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "exw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      },
      "USSec": {
        "usseceast": {
          "abbreviation": "east",
          "recoveryServicesGeo": "rxe",
          "timeDifference": "-5:00",
          "timeZone": "Eastern Standard Time"
        },
        "ussecwest": {
          "abbreviation": "west",
          "recoveryServicesGeo": "rxw",
          "timeDifference": "-8:00",
          "timeZone": "Pacific Standard Time"
        }
      }
    },
    "$fxv#1": {
      "automationAccounts": "aa",
      "availabilitySets": "as",
      "computeGalleries": "gal",
      "dataCollectionEndpoints": "dce",
      "dataCollectionRules": "dcr",
      "desktopApplicationGroups": "vddag",
      "diskAccesses": "da",
      "remoteApplicationGroups": "vdrag",
      "disks": "disk",
      "diskEncryptionSets": "des",
      "hostPools": "vdpool",
      "keyVaults": "kv",
      "logAnalyticsWorkspaces": "law",
      "netAppAccounts": "naa",
      "netAppCapacityPools": "nacp",
      "networkInterfaces": "nic",
      "privateEndpoints": "pe",
      "recoveryServicesVaults": "rsv",
      "resourceGroups": "rg",
      "storageAccounts": "sa",
      "subnets": "subnet",
      "userAssignedIdentities": "uai",
      "virtualMachines": "vm",
      "virtualNetworks": "vnet",
      "workspaces": "vdws"
    },
    "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]",
    "privateDnsZoneSuffixes_AzureWebSites": {
      "AzureCloud": "azurewebsites.net",
      "AzureUSGovernment": "azurewebsites.us",
      "USNat": null,
      "USSec": null
    },
    "webSitePrivateDnsZoneName": "[if(parameters('enableInboundPrivateEndpoint'), createArray(format('privatelink.{0}', coalesce(variables('privateDnsZoneSuffixes_AzureWebSites')[environment().name], format('appservice.{0}', variables('cloudSuffix'))))), createArray())]",
    "blobContainerName": "[format('app-package-{0}', toLower(parameters('functionAppName')))]",
    "locations": "[variables('$fxv#0')[environment().name]]",
    "resourceAbbreviations": "[variables('$fxv#1')]",
    "nameConvPrivEndpoints": "[if(parameters('nameConvResTypeAtEnd'), format('RESOURCENAME-SERVICE-{0}-{1}-VNET', variables('locations')[parameters('location')].abbreviation, variables('resourceAbbreviations').privateEndpoints), format('{0}-RESOURCENAME-SERVICE-{1}-VNET', variables('resourceAbbreviations').privateEndpoints, variables('locations')[parameters('location')].abbreviation))]",
    "subnetOutbound": "[if(parameters('enableVnetIntegration'), createArray(createObject('name', parameters('functionAppOutboundSubnetName'), 'properties', createObject('delegations', createArray(createObject('name', if(equals(parameters('hostingPlanType'), 'FlexConsumption'), 'appEnvironments', 'webServerFarms'), 'properties', createObject('serviceName', if(equals(parameters('hostingPlanType'), 'FlexConsumption'), 'Microsoft.App/environments', 'Microsoft.Web/serverFarms')))), 'addressPrefix', parameters('functionAppOutboundSubnetAddressPrefix')))), createArray())]",
    "subnetStoragePrivateEndpoints": "[if(parameters('enableStoragePrivateEndpoints'), createArray(createObject('name', parameters('storagePrivateEndpointSubnetName'), 'properties', createObject('privateEndpointNetworkPolicies', 'Disabled', 'addressPrefix', parameters('storagePrivateEndpointSubnetAddressPrefix')))), createArray())]",
    "subnetInboundPrivateEndpoint": "[if(parameters('enableInboundPrivateEndpoint'), createArray(createObject('name', parameters('functionAppInboundSubnetName'), 'properties', createObject('privateEndpointNetworkPolicies', 'Disabled', 'addressPrefix', parameters('functionAppInboundSubnetAddressPrefix')))), createArray())]",
    "storagePrivateDnsZoneNames": "[if(parameters('enableStoragePrivateEndpoints'), createArray(format('privatelink.blob.{0}', environment().suffixes.storage), format('privatelink.file.{0}', environment().suffixes.storage), format('privatelink.queue.{0}', environment().suffixes.storage), format('privatelink.table.{0}', environment().suffixes.storage)), createArray())]",
    "resourceGroupNameFunctionApp": "[parameters('functionAppResourceGroupName')]",
    "resourceGroupNameStorage": "[if(and(not(empty(parameters('storageAccountId'))), not(parameters('deployStorageAccount'))), split(parameters('storageAccountId'), '/')[4], variables('resourceGroupNameFunctionApp'))]",
    "resourceGroupNameHostingPlan": "[if(not(empty(parameters('hostingPlanResourceGroupName'))), parameters('hostingPlanResourceGroupName'), variables('resourceGroupNameFunctionApp'))]",
    "resourceGroupNameNetworking": "[if(not(empty(parameters('networkingResourceGroupName'))), parameters('networkingResourceGroupName'), variables('resourceGroupNameFunctionApp'))]",
    "resourceGroupNames": [
      "[variables('resourceGroupNameNetworking')]",
      "[variables('resourceGroupNameHostingPlan')]",
      "[variables('resourceGroupNameFunctionApp')]"
    ]
  },
  "resources": [
    {
      "copy": {
        "name": "rgs",
        "count": "[length(union(variables('resourceGroupNames'), variables('resourceGroupNames')))]"
      },
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2023-07-01",
      "name": "[union(variables('resourceGroupNames'), variables('resourceGroupNames'))[copyIndex()]]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[and(parameters('deployNetworking'), or(parameters('enableVnetIntegration'), parameters('enableInboundPrivateEndpoint')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('networking-resources-{0}', parameters('timestamp'))]",
      "resourceGroup": "[variables('resourceGroupNameNetworking')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "privateDnsZoneNames": "[if(parameters('deployStoragePrivateDnsZones'), if(parameters('deployFunctionAppPrivateDnsZone'), createObject('value', union(variables('storagePrivateDnsZoneNames'), variables('webSitePrivateDnsZoneName'))), createObject('value', variables('storagePrivateDnsZoneNames'))), if(parameters('deployFunctionAppPrivateDnsZone'), createObject('value', variables('webSitePrivateDnsZoneName')), createObject('value', createArray())))]",
          "subnets": {
            "value": "[union(variables('subnetOutbound'), variables('subnetStoragePrivateEndpoints'), variables('subnetInboundPrivateEndpoint'))]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "vnetName": {
            "value": "[parameters('vnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "16791217026279762443"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "privateDnsZoneNames": {
              "type": "array"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetAddressPrefix": {
              "type": "string"
            },
            "subnets": {
              "type": "array"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-05-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                }
              },
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/virtualNetworks'), createObject())]"
            },
            {
              "copy": {
                "name": "snets",
                "count": "[length(parameters('subnets'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnets')[copyIndex()].name)]",
              "properties": "[parameters('subnets')[copyIndex()].properties]",
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('privateDnsZoneNames')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('privateDns-virtualNetworkLinks-{0}', parameters('timestamp'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneNames": {
                    "value": "[parameters('privateDnsZoneNames')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "vnetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.34.60546",
                      "templateHash": "394508395134463222"
                    }
                  },
                  "parameters": {
                    "privateDnsZoneNames": {
                      "type": "array"
                    },
                    "vnetId": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZones",
                        "count": "[length(parameters('privateDnsZoneNames'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneNames')[copyIndex()]]",
                      "location": "global",
                      "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateDnsZones'), createObject())]"
                    },
                    {
                      "copy": {
                        "name": "virtualNetworkLinks",
                        "count": "[length(parameters('privateDnsZoneNames'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneNames')[copyIndex()], last(split(parameters('vnetId'), '/')))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('vnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneNames')[copyIndex()])]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "snets",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
              ]
            }
          ],
          "outputs": {
            "subnetIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('subnets'))]",
                "input": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), parameters('subnets')[copyIndex()].name)]"
              }
            },
            "privateDnsZoneIds": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('privateDnsZoneNames'))]",
                "input": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneNames')[copyIndex()])]"
              }
            },
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "rgs"
      ]
    },
    {
      "condition": "[parameters('deployHostingPlan')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('hostingPlan-{0}', parameters('timestamp'))]",
      "resourceGroup": "[variables('resourceGroupNameHostingPlan')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionAppKind": {
            "value": "[parameters('functionAppKind')]"
          },
          "hostingPlanType": {
            "value": "[parameters('hostingPlanType')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[parameters('logAnalyticsWorkspaceId')]"
          },
          "name": {
            "value": "[parameters('hostingPlanName')]"
          },
          "planPricing": {
            "value": "[parameters('hostingPlanPricing')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "zoneRedundant": {
            "value": "[parameters('hostingPlanZoneRedundant')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "8780792421718274579"
            }
          },
          "parameters": {
            "hostingPlanType": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "functionAppKind": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "planPricing": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "zoneRedundant": {
              "type": "bool"
            }
          },
          "variables": {
            "sku": {
              "name": "[split(parameters('planPricing'), '_')[1]]",
              "tier": "[split(parameters('planPricing'), '_')[0]]",
              "capacity": "[if(parameters('zoneRedundant'), 3, 1)]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-12-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": "[variables('sku')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Web/serverfarms'), createObject())]",
              "properties": {
                "maximumElasticWorkerCount": "[if(contains(parameters('hostingPlanType'), 'Consumption'), null(), if(equals(parameters('hostingPlanType'), 'FunctionsPremium'), 20, 1))]",
                "reserved": "[if(contains(parameters('functionAppKind'), 'linux'), true(), false())]",
                "zoneRedundant": "[parameters('zoneRedundant')]"
              }
            },
            {
              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
              "properties": {
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "hostingPlanId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "rgs"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('storage-resources-{0}', parameters('timestamp'))]",
      "resourceGroup": "[variables('resourceGroupNameStorage')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerName": {
            "value": "[variables('blobContainerName')]"
          },
          "deployStorageAccount": {
            "value": "[parameters('deployStorageAccount')]"
          },
          "enableStoragePrivateEndpoints": {
            "value": "[parameters('enableStoragePrivateEndpoints')]"
          },
          "fileShareName": "[if(parameters('deployHostingPlan'), if(not(equals(parameters('hostingPlanType'), 'AppServicePlan')), createObject('value', toLower(parameters('functionAppName'))), createObject('value', '')), if(not(equals(if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full'))), if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full').sku.tier, 'Flex'), 'FlexConsumption', if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full').sku.tier, 'Elastic'), 'FunctionsPremium', 'AppServicePlan')), ''), 'AppServicePlan')), createObject('value', toLower(parameters('functionAppName'))), createObject('value', '')))]",
          "hostPlanType": "[if(parameters('deployHostingPlan'), createObject('value', parameters('hostingPlanType')), if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full'))), if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full').sku.tier, 'Flex'), createObject('value', 'FlexConsumption'), if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full').sku.tier, 'Elastic'), createObject('value', 'FunctionsPremium'), createObject('value', 'AppServicePlan'))), createObject('value', '')))]",
          "logAnalyticsWorkspaceId": {
            "value": "[parameters('logAnalyticsWorkspaceId')]"
          },
          "nameConvPrivEndpoints": {
            "value": "[variables('nameConvPrivEndpoints')]"
          },
          "storageAccountId": {
            "value": "[parameters('storageAccountId')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "storageAccountPrivateEndpointSubnetId": "[if(parameters('enableStoragePrivateEndpoints'), if(parameters('deployNetworking'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetIds.value[1]), createObject('value', parameters('storagePrivateEndpointSubnetId'))), createObject('value', ''))]",
          "storageAccountSku": "[if(parameters('deployHostingPlan'), if(parameters('hostingPlanZoneRedundant'), createObject('value', 'Standard_ZRS'), createObject('value', 'Standard_LRS')), if(greater(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01').numberOfWorkers, 1), createObject('value', 'Standard_ZRS'), createObject('value', 'Standard_LRS')))]",
          "storageBlobDnsZoneId": "[if(parameters('enableStoragePrivateEndpoints'), if(parameters('deployNetworking'), if(parameters('deployStoragePrivateDnsZones'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.privateDnsZoneIds.value[0]), createObject('value', '')), createObject('value', parameters('storageBlobDnsZoneId'))), createObject('value', ''))]",
          "storageFileDnsZoneId": "[if(parameters('enableStoragePrivateEndpoints'), if(parameters('deployNetworking'), if(parameters('deployStoragePrivateDnsZones'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.privateDnsZoneIds.value[1]), createObject('value', '')), createObject('value', parameters('storageFileDnsZoneId'))), createObject('value', ''))]",
          "storageQueueDnsZoneId": "[if(parameters('enableStoragePrivateEndpoints'), if(parameters('deployNetworking'), if(parameters('deployStoragePrivateDnsZones'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.privateDnsZoneIds.value[2]), createObject('value', '')), createObject('value', parameters('storageQueueDnsZoneId'))), createObject('value', ''))]",
          "storageTableDnsZoneId": "[if(parameters('enableStoragePrivateEndpoints'), if(parameters('deployNetworking'), if(parameters('deployStoragePrivateDnsZones'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.privateDnsZoneIds.value[3]), createObject('value', '')), createObject('value', parameters('storageTableDnsZoneId'))), createObject('value', ''))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "8080103000093752590"
            }
          },
          "parameters": {
            "containerName": {
              "type": "string"
            },
            "deployStorageAccount": {
              "type": "bool"
            },
            "enableStoragePrivateEndpoints": {
              "type": "bool"
            },
            "fileShareName": {
              "type": "string"
            },
            "hostPlanType": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "nameConvPrivEndpoints": {
              "type": "string"
            },
            "storageAccountId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountPrivateEndpointSubnetId": {
              "type": "string"
            },
            "storageAccountSku": {
              "type": "string"
            },
            "storageBlobDnsZoneId": {
              "type": "string"
            },
            "storageFileDnsZoneId": {
              "type": "string"
            },
            "storageQueueDnsZoneId": {
              "type": "string"
            },
            "storageTableDnsZoneId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "storageAccountNameVar": "[if(parameters('deployStorageAccount'), parameters('storageAccountName'), last(split(parameters('storageAccountId'), '/')))]",
            "vnetName": "[split(parameters('storageAccountPrivateEndpointSubnetId'), '/')[8]]",
            "storageAccountPrivateEndpoints": "[if(parameters('enableStoragePrivateEndpoints'), createArray(createObject('name', replace(replace(replace(parameters('nameConvPrivEndpoints'), 'RESOURCENAME', variables('storageAccountNameVar')), 'SERVICE', 'blob'), 'VNET', variables('vnetName')), 'privateDnsZoneId', parameters('storageBlobDnsZoneId'), 'service', 'blob'), createObject('name', replace(replace(replace(parameters('nameConvPrivEndpoints'), 'RESOURCENAME', variables('storageAccountNameVar')), 'SERVICE', 'file'), 'VNET', variables('vnetName')), 'privateDnsZoneId', parameters('storageFileDnsZoneId'), 'service', 'file'), createObject('name', replace(replace(replace(parameters('nameConvPrivEndpoints'), 'RESOURCENAME', variables('storageAccountNameVar')), 'SERVICE', 'queue'), 'VNET', variables('vnetName')), 'privateDnsZoneId', parameters('storageQueueDnsZoneId'), 'service', 'queue'), createObject('name', replace(replace(replace(parameters('nameConvPrivEndpoints'), 'RESOURCENAME', variables('storageAccountNameVar')), 'SERVICE', 'table'), 'VNET', variables('vnetName')), 'privateDnsZoneId', parameters('storageTableDnsZoneId'), 'service', 'table')), createArray())]"
          },
          "resources": [
            {
              "condition": "[parameters('deployStorageAccount')]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', variables('storageAccountNameVar'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar'))]"
              ]
            },
            {
              "condition": "[and(parameters('deployStorageAccount'), and(not(equals(parameters('hostPlanType'), 'AppServicePlan')), not(equals(parameters('hostPlanType'), 'FlexConsumption'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', variables('storageAccountNameVar'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar'))]"
              ]
            },
            {
              "condition": "[parameters('deployStorageAccount')]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-01-01",
              "name": "[variables('storageAccountNameVar')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject())]",
              "sku": {
                "name": "[parameters('storageAccountSku')]"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": false,
                "allowedCopyScope": "PrivateLink",
                "allowCrossTenantReplication": false,
                "allowSharedKeyAccess": "[if(and(not(equals(parameters('hostPlanType'), 'AppServicePlan')), not(equals(parameters('hostPlanType'), 'FlexConsumption'))), true(), false())]",
                "defaultToOAuthAuthentication": false,
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "requireInfrastructureEncryption": true,
                  "services": {
                    "blob": {
                      "enabled": true
                    },
                    "file": {
                      "enabled": true
                    },
                    "queue": {
                      "enabled": true
                    },
                    "table": {
                      "enabled": true
                    }
                  }
                },
                "largeFileSharesState": "Enabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": []
                },
                "publicNetworkAccess": "[if(parameters('enableStoragePrivateEndpoints'), 'Disabled', 'Enabled')]",
                "sasPolicy": {
                  "expirationAction": "Log",
                  "sasExpirationPeriod": "180.00:00:00"
                }
              }
            },
            {
              "condition": "[and(parameters('deployStorageAccount'), and(and(parameters('deployStorageAccount'), not(equals(parameters('hostPlanType'), 'AppServicePlan'))), not(equals(parameters('hostPlanType'), 'FlexConsumption'))))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', variables('storageAccountNameVar'), 'default', parameters('fileShareName'))]",
              "properties": {
                "enabledProtocols": "SMB",
                "shareQuota": 5120
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageAccountNameVar'), 'default')]"
              ]
            },
            {
              "condition": "[and(parameters('deployStorageAccount'), and(parameters('deployStorageAccount'), equals(parameters('hostPlanType'), 'FlexConsumption')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}/{2}', variables('storageAccountNameVar'), 'default', parameters('containerName'))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountNameVar'), 'default')]"
              ]
            },
            {
              "condition": "[and(and(and(not(parameters('deployStorageAccount')), not(empty(parameters('storageAccountId')))), not(equals(parameters('hostPlanType'), 'AppServicePlan'))), not(equals(parameters('hostPlanType'), 'FlexConsumption')))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', variables('storageAccountNameVar'), 'default')]"
            },
            {
              "condition": "[and(and(and(not(parameters('deployStorageAccount')), not(empty(parameters('storageAccountId')))), not(equals(parameters('hostPlanType'), 'AppServicePlan'))), not(equals(parameters('hostPlanType'), 'FlexConsumption')))]",
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', variables('storageAccountNameVar'), 'default', parameters('fileShareName'))]",
              "properties": {
                "enabledProtocols": "SMB",
                "shareQuota": 5120
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('storageAccountNameVar'), 'default')]"
              ]
            },
            {
              "condition": "[and(and(not(parameters('deployStorageAccount')), not(empty(parameters('storageAccountId')))), or(equals(parameters('hostPlanType'), 'AppServicePlan'), equals(parameters('hostPlanType'), 'FlexConsumption')))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', variables('storageAccountNameVar'), 'default')]"
            },
            {
              "condition": "[and(and(not(parameters('deployStorageAccount')), not(empty(parameters('storageAccountId')))), equals(parameters('hostPlanType'), 'FlexConsumption'))]",
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}/{2}', variables('storageAccountNameVar'), 'default', parameters('containerName'))]",
              "properties": {
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountNameVar'), 'default')]"
              ]
            },
            {
              "copy": {
                "name": "storageAccount_privateEndpoints",
                "count": "[length(variables('storageAccountPrivateEndpoints'))]"
              },
              "condition": "[parameters('enableStoragePrivateEndpoints')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[variables('storageAccountPrivateEndpoints')[copyIndex()].name]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-connection', variables('storageAccountPrivateEndpoints')[copyIndex()].name)]",
                    "properties": {
                      "privateLinkServiceId": "[if(parameters('deployStorageAccount'), resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar')), resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar')))]",
                      "groupIds": [
                        "[variables('storageAccountPrivateEndpoints')[copyIndex()].service]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('storageAccountPrivateEndpointSubnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar'))]"
              ]
            },
            {
              "copy": {
                "name": "storageAccount_PrivateDnsZoneGroups",
                "count": "[length(variables('storageAccountPrivateEndpoints'))]"
              },
              "condition": "[and(parameters('enableStoragePrivateEndpoints'), not(empty(variables('storageAccountPrivateEndpoints')[copyIndex()].privateDnsZoneId)))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-06-01",
              "name": "[format('{0}/{1}', variables('storageAccountPrivateEndpoints')[copyIndex()].name, format('{0}-group', variables('storageAccountPrivateEndpoints')[copyIndex()].name))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[if(not(empty(variables('storageAccountPrivateEndpoints')[copyIndex()].privateDnsZoneId)), format('{0}-config', last(split(variables('storageAccountPrivateEndpoints')[copyIndex()].privateDnsZoneId, '/'))), '')]",
                    "properties": {
                      "privateDnsZoneId": "[variables('storageAccountPrivateEndpoints')[copyIndex()].privateDnsZoneId]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountPrivateEndpoints')[copyIndex()].name)]"
              ]
            },
            {
              "condition": "[and(parameters('deployStorageAccount'), not(empty(parameters('logAnalyticsWorkspaceId'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountNameVar'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('storageAccountName'))]",
              "properties": {
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar'))]"
              ]
            },
            {
              "condition": "[and(parameters('deployStorageAccount'), not(empty(parameters('logAnalyticsWorkspaceId'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', variables('storageAccountNameVar'), 'default')]",
              "name": "[format('{0}-blob-diagnosticSettings', parameters('storageAccountName'))]",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountNameVar'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "storageAccountResourceId": {
              "type": "string",
              "value": "[if(parameters('deployStorageAccount'), resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar')), resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameVar')))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('functionApp-resources-{0}', parameters('timestamp'))]",
      "resourceGroup": "[parameters('functionAppResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "blobContainerName": {
            "value": "[variables('blobContainerName')]"
          },
          "enableApplicationInsights": {
            "value": "[parameters('enableApplicationInsights')]"
          },
          "enablePublicAccess": {
            "value": "[parameters('enablePublicAccess')]"
          },
          "enableInboundPrivateEndpoint": {
            "value": "[parameters('enableInboundPrivateEndpoint')]"
          },
          "functionAppKind": {
            "value": "[parameters('functionAppKind')]"
          },
          "functionAppName": {
            "value": "[parameters('functionAppName')]"
          },
          "functionAppOutboundSubnetId": "[if(parameters('enableVnetIntegration'), if(parameters('deployNetworking'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetIds.value[0]), createObject('value', parameters('functionAppOutboundSubnetId'))), createObject('value', ''))]",
          "functionAppInboundSubnetId": "[if(parameters('enableInboundPrivateEndpoint'), if(parameters('deployNetworking'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.subnetIds.value[2]), createObject('value', parameters('functionAppInboundSubnetId'))), createObject('value', ''))]",
          "functionAppPrivateDnsZoneId": "[if(parameters('enableInboundPrivateEndpoint'), if(parameters('deployNetworking'), if(parameters('deployFunctionAppPrivateDnsZone'), if(parameters('deployStoragePrivateDnsZones'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.privateDnsZoneIds.value[4]), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.privateDnsZoneIds.value[0])), createObject('value', '')), createObject('value', parameters('functionAppPrivateDnsZoneId'))), createObject('value', ''))]",
          "hostingPlanType": "[if(equals(parameters('hostingPlanType'), 'Consumption'), createObject('value', ''), if(parameters('deployHostingPlan'), createObject('value', parameters('hostingPlanType')), if(not(empty(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full'))), if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full').sku.tier, 'Flex'), createObject('value', 'FlexConsumption'), if(contains(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('hostingPlanId'), '/')[2], split(parameters('hostingPlanId'), '/')[4]), 'Microsoft.Web/serverfarms', last(split(parameters('hostingPlanId'), '/'))), '2023-01-01', 'full').sku.tier, 'Elastic'), createObject('value', 'FunctionsPremium'), createObject('value', 'AppServicePlan'))), createObject('value', ''))))]",
          "hostingPlanId": "[if(equals(parameters('hostingPlanType'), 'Consumption'), createObject('value', ''), if(parameters('deployHostingPlan'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameHostingPlan')), 'Microsoft.Resources/deployments', format('hostingPlan-{0}', parameters('timestamp'))), '2022-09-01').outputs.hostingPlanId.value), createObject('value', parameters('hostingPlanId'))))]",
          "nameConvPrivEndpoints": {
            "value": "[variables('nameConvPrivEndpoints')]"
          },
          "privateLinkScopeResourceId": {
            "value": "[parameters('privateLinkScopeResourceId')]"
          },
          "runtimeStack": {
            "value": "[parameters('runtimeStack')]"
          },
          "runtimeVersion": {
            "value": "[parameters('runtimeVersion')]"
          },
          "storageAccountResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameStorage')), 'Microsoft.Resources/deployments', format('storage-resources-{0}', parameters('timestamp'))), '2022-09-01').outputs.storageAccountResourceId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[parameters('logAnalyticsWorkspaceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "instanceMemoryMB": {
            "value": "[parameters('flexConsumptionInstanceMemoryMB')]"
          },
          "maximumInstanceCount": {
            "value": "[parameters('flexConsumptionMaximumInstanceCount')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.31.34.60546",
              "templateHash": "6789553864136081475"
            }
          },
          "parameters": {
            "blobContainerName": {
              "type": "string"
            },
            "enableApplicationInsights": {
              "type": "bool"
            },
            "enableInboundPrivateEndpoint": {
              "type": "bool"
            },
            "enablePublicAccess": {
              "type": "bool"
            },
            "functionAppInboundSubnetId": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "functionAppOutboundSubnetId": {
              "type": "string"
            },
            "hostingPlanId": {
              "type": "string",
              "nullable": true
            },
            "hostingPlanType": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "functionAppKind": {
              "type": "string"
            },
            "functionAppPrivateDnsZoneId": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            },
            "maximumInstanceCount": {
              "type": "int"
            },
            "privateLinkScopeResourceId": {
              "type": "string"
            },
            "instanceMemoryMB": {
              "type": "int"
            },
            "nameConvPrivEndpoints": {
              "type": "string"
            },
            "runtimeVersion": {
              "type": "string"
            },
            "runtimeStack": {
              "type": "string"
            },
            "storageAccountResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string"
            }
          },
          "variables": {
            "functionsWorkerRuntime": "[if(or(equals(parameters('runtimeVersion'), '.NET Framework 4.8'), contains(parameters('runtimeVersion'), 'Isolated')), format('{0}-isolated', parameters('runtimeStack')), parameters('runtimeStack'))]",
            "firstRuntimeVersion": "[split(parameters('runtimeVersion'), ' ')[0]]",
            "decimalRuntimeVersion": "[if(equals(parameters('runtimeVersion'), '.NET Framework 4.8'), '4.0', if(and(equals(parameters('runtimeStack'), 'dotnet'), equals(length(variables('firstRuntimeVersion')), 1)), format('{0}.0', variables('firstRuntimeVersion')), variables('firstRuntimeVersion')))]",
            "linuxRuntimeStack": "[if(contains(variables('functionsWorkerRuntime'), 'dotnet'), toUpper(variables('functionsWorkerRuntime')), if(equals(parameters('runtimeStack'), 'node'), 'Node', if(equals(parameters('runtimeStack'), 'powershell'), 'PowerShell', if(equals(parameters('runtimeStack'), 'python'), 'Python', if(equals(parameters('runtimeStack'), 'java'), 'Java', null())))))]",
            "aspAppSettings": [
              {
                "name": "AzureWebJobsStorage__blobServiceUri",
                "value": "[format('https://{0}.blob.{1}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage)]"
              },
              {
                "name": "AzureWebJobsStorage__credential",
                "value": "managedidentity"
              },
              {
                "name": "AzureWebJobsStorage__queueServiceUri",
                "value": "[format('https://{0}.queue.{1}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage)]"
              },
              {
                "name": "AzureWebJobsStorage__tableServiceUri",
                "value": "[format('https://{0}.table.{1}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage)]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~4"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "[variables('functionsWorkerRuntime')]"
              },
              {
                "name": "WEBSITE_LOAD_USER_PROFILE",
                "value": "1"
              }
            ],
            "isolatedAppSettings": "[if(contains(variables('functionsWorkerRuntime'), 'isolated'), createArray(createObject('name', 'WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED', 'value', '1')), createArray())]",
            "windowsAppSettings": "[if(equals(parameters('functionAppKind'), 'functionapp'), createArray(createObject('name', 'WEBSITE_NODE_DEFAULT_VERSION', 'value', format('~{0}', variables('decimalRuntimeVersion')))), createArray())]",
            "storageRoleDefinitionId": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
          },
          "resources": {
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
            },
            "applicationInsights": {
              "condition": "[parameters('enableApplicationInsights')]",
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[format('{0}-insights', parameters('functionAppName'))]",
              "kind": "web",
              "location": "[parameters('location')]",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[if(not(empty(parameters('logAnalyticsWorkspaceId'))), parameters('logAnalyticsWorkspaceId'), null())]"
              },
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/components'), createObject())]"
            },
            "functionApp": {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-12-01",
              "name": "[parameters('functionAppName')]",
              "identity": "[if(or(equals(parameters('hostingPlanType'), 'AppServicePlan'), equals(parameters('hostingPlanType'), 'FlexConsumption')), createObject('type', 'SystemAssigned'), null())]",
              "kind": "[parameters('functionAppKind')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Web/sites'), createObject())]",
              "properties": {
                "httpsOnly": true,
                "functionAppConfig": "[if(equals(parameters('hostingPlanType'), 'FlexConsumption'), createObject('deployment', createObject('storage', createObject('type', 'blobContainer', 'value', format('{0}{1}', reference('storageAccount').primaryEndpoints.blob, toLower(parameters('blobContainerName'))), 'authentication', createObject('type', 'SystemAssignedIdentity'))), 'scaleAndConcurrency', createObject('maximumInstanceCount', parameters('maximumInstanceCount'), 'instanceMemoryMB', parameters('instanceMemoryMB')), 'runtime', createObject('name', variables('functionsWorkerRuntime'), 'version', variables('decimalRuntimeVersion'))), null())]",
                "publicNetworkAccess": "[if(parameters('enablePublicAccess'), 'Enabled', 'Disabled')]",
                "serverFarmId": "[if(not(empty(parameters('hostingPlanId'))), parameters('hostingPlanId'), null())]",
                "siteConfig": "[if(equals(parameters('hostingPlanType'), 'FlexConsumption'), createObject('appSettings', if(equals(parameters('hostingPlanType'), 'AppServicePlan'), union(variables('aspAppSettings'), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference('applicationInsights').ConnectionString)), createArray()), variables('isolatedAppSettings'), variables('windowsAppSettings')), if(equals(parameters('hostingPlanType'), 'FlexConsumption'), union(if(equals(environment().name, 'AzureCloud'), createArray(createObject('name', 'AzureWebJobsStorage__accountName', 'value', last(split(parameters('storageAccountResourceId'), '/')))), createArray(createObject('name', 'AzureWebJobsStorage__blobServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.blob, 0, sub(length(reference('storageAccount').primaryEndpoints.blob), 1))), createObject('name', 'AzureWebJobsStorage__queueServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.queue, 0, sub(length(reference('storageAccount').primaryEndpoints.queue), 1))), createObject('name', 'AzureWebJobsStorage__tableServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.table, 0, sub(length(reference('storageAccount').primaryEndpoints.table), 1))), createObject('name', 'AzureWebJobsStorage__fileServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.file, 0, sub(length(reference('storageAccount').primaryEndpoints.file), 1))))), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference('applicationInsights').ConnectionString)), createArray())), union(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage, listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2021-04-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage, listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2021-04-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', toLower(parameters('functionAppName'))), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', variables('functionsWorkerRuntime'))), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference('applicationInsights').ConnectionString)), createArray()), variables('isolatedAppSettings'), variables('windowsAppSettings'))))), createObject('appSettings', if(equals(parameters('hostingPlanType'), 'AppServicePlan'), union(variables('aspAppSettings'), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference('applicationInsights').ConnectionString)), createArray()), variables('isolatedAppSettings'), variables('windowsAppSettings')), if(equals(parameters('hostingPlanType'), 'FlexConsumption'), union(if(equals(environment().name, 'AzureCloud'), createArray(createObject('name', 'AzureWebJobsStorage__accountName', 'value', last(split(parameters('storageAccountResourceId'), '/')))), createArray(createObject('name', 'AzureWebJobsStorage__blobServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.blob, 0, sub(length(reference('storageAccount').primaryEndpoints.blob), 1))), createObject('name', 'AzureWebJobsStorage__queueServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.queue, 0, sub(length(reference('storageAccount').primaryEndpoints.queue), 1))), createObject('name', 'AzureWebJobsStorage__tableServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.table, 0, sub(length(reference('storageAccount').primaryEndpoints.table), 1))), createObject('name', 'AzureWebJobsStorage__fileServiceUri', 'value', substring(reference('storageAccount').primaryEndpoints.file, 0, sub(length(reference('storageAccount').primaryEndpoints.file), 1))))), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference('applicationInsights').ConnectionString)), createArray())), union(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage, listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2021-04-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', last(split(parameters('storageAccountResourceId'), '/')), environment().suffixes.storage, listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('storageAccountResourceId'), '/')[2], split(parameters('storageAccountResourceId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2021-04-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTSHARE', 'value', toLower(parameters('functionAppName'))), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', variables('functionsWorkerRuntime'))), if(parameters('enableApplicationInsights'), createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference('applicationInsights').ConnectionString)), createArray()), variables('isolatedAppSettings'), variables('windowsAppSettings')))), 'linuxFxVersion', if(contains(parameters('functionAppKind'), 'linux'), format('{0}|{1}', variables('linuxRuntimeStack'), variables('decimalRuntimeVersion')), null()), 'netFrameworkVersion', if(and(not(contains(parameters('functionAppKind'), 'linux')), contains(parameters('runtimeStack'), 'dotnet')), format('v{0}', variables('decimalRuntimeVersion')), null())))]",
                "virtualNetworkSubnetId": "[if(not(empty(parameters('functionAppOutboundSubnetId'))), parameters('functionAppOutboundSubnetId'), null())]",
                "vnetImagePullEnabled": "[if(equals(parameters('hostingPlanType'), 'FlexConsumption'), null(), if(not(empty(parameters('functionAppOutboundSubnetId'))), true(), false()))]",
                "vnetContentShareEnabled": "[if(or(equals(parameters('hostingPlanType'), 'AppServicePlan'), equals(parameters('hostingPlanType'), 'FlexConsumption')), null(), if(not(empty(parameters('functionAppOutboundSubnetId'))), true(), false()))]",
                "vnetRouteAllEnabled": "[if(equals(parameters('hostingPlanType'), 'FlexConsumption'), null(), if(not(empty(parameters('functionAppOutboundSubnetId'))), true(), false()))]"
              },
              "dependsOn": [
                "applicationInsights",
                "storageAccount"
              ]
            },
            "functionApp_PrivateEndpoint": {
              "condition": "[parameters('enableInboundPrivateEndpoint')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-02-01",
              "name": "[replace(replace(replace(parameters('nameConvPrivEndpoints'), 'RESOURCENAME', parameters('functionAppName')), 'SERVICE', 'sites'), 'VNET', split(parameters('functionAppInboundSubnetId'), '/')[8])]",
              "location": "[parameters('location')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('pe-{0}-sites-connection', parameters('functionAppName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('functionAppInboundSubnetId')]"
                }
              },
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())]",
              "dependsOn": [
                "functionApp"
              ]
            },
            "functionApp_PrivateDnsZoneGroup": {
              "condition": "[and(parameters('enableInboundPrivateEndpoint'), not(empty(parameters('functionAppPrivateDnsZoneId'))))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-06-01",
              "name": "[format('{0}/{1}', replace(replace(replace(parameters('nameConvPrivEndpoints'), 'RESOURCENAME', parameters('functionAppName')), 'SERVICE', 'sites'), 'VNET', split(parameters('functionAppInboundSubnetId'), '/')[8]), format('{0}-group', replace(replace(replace(parameters('nameConvPrivEndpoints'), 'RESOURCENAME', parameters('functionAppName')), 'SERVICE', 'sites'), 'VNET', split(parameters('functionAppInboundSubnetId'), '/')[8])))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[if(not(empty(parameters('functionAppPrivateDnsZoneId'))), format('{0}-config', last(split(parameters('functionAppPrivateDnsZoneId'), '/'))), '')]",
                    "properties": {
                      "privateDnsZoneId": "[parameters('functionAppPrivateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "functionApp_PrivateEndpoint"
              ]
            },
            "functionApp_diagnosticsSettings": {
              "condition": "[not(empty(parameters('logAnalyticsWorkspaceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('functionAppName'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('functionAppName'))]",
              "properties": {
                "logs": [
                  {
                    "category": "FunctionAppLogs",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "functionApp"
              ]
            },
            "updatePrivateLinkScope": {
              "condition": "[and(parameters('enableApplicationInsights'), not(empty(parameters('privateLinkScopeResourceId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('PrivateLlinkScope-{0}', parameters('timestamp'))]",
              "subscriptionId": "[subscription().subscriptionId]",
              "location": "[resourceGroup().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateLinkScopeResourceId": {
                    "value": "[parameters('privateLinkScopeResourceId')]"
                  },
                  "scopedResourceIds": {
                    "value": [
                      "[resourceId('Microsoft.Insights/components', format('{0}-insights', parameters('functionAppName')))]"
                    ]
                  },
                  "timeStamp": {
                    "value": "[parameters('timestamp')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.34.60546",
                      "templateHash": "686743165809952076"
                    }
                  },
                  "parameters": {
                    "privateLinkScopeResourceId": {
                      "type": "string"
                    },
                    "scopedResourceIds": {
                      "type": "array"
                    },
                    "timeStamp": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('addScopedResources-{0}', parameters('timeStamp'))]",
                      "subscriptionId": "[split(parameters('privateLinkScopeResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('privateLinkScopeResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateLinkScopeResourceId": {
                            "value": "[parameters('privateLinkScopeResourceId')]"
                          },
                          "scopedResourceIds": {
                            "value": "[parameters('scopedResourceIds')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.31.34.60546",
                              "templateHash": "9371405204260285031"
                            }
                          },
                          "parameters": {
                            "scopedResourceIds": {
                              "type": "array"
                            },
                            "privateLinkScopeResourceId": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "scopedResources",
                                "count": "[length(parameters('scopedResourceIds'))]"
                              },
                              "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                              "apiVersion": "2021-07-01-preview",
                              "name": "[format('{0}/{1}', last(split(parameters('privateLinkScopeResourceId'), '/')), last(split(parameters('scopedResourceIds')[copyIndex()], '/')))]",
                              "properties": {
                                "linkedResourceId": "[parameters('scopedResourceIds')[copyIndex()]]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "applicationInsights"
              ]
            },
            "storageBlobDataOwnerRoleAssignment": {
              "condition": "[or(equals(parameters('hostingPlanType'), 'AppServicePlan'), equals(parameters('hostingPlanType'), 'FlexConsumption'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "roleAssignment-storageAccount",
              "subscriptionId": "[split(parameters('storageAccountResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('storageAccountResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalId": {
                    "value": "[reference('functionApp', '2023-12-01', 'full').identity.principalId]"
                  },
                  "storageAccountResourceId": {
                    "value": "[parameters('storageAccountResourceId')]"
                  },
                  "roleDefinitionId": {
                    "value": "[variables('storageRoleDefinitionId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.31.34.60546",
                      "templateHash": "17355991746217053850"
                    }
                  },
                  "parameters": {
                    "principalId": {
                      "type": "string"
                    },
                    "storageAccountResourceId": {
                      "type": "string"
                    },
                    "roleDefinitionId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('storageAccountResourceId'), '/')))]",
                      "name": "[guid(parameters('storageAccountResourceId'), parameters('roleDefinitionId'))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]",
                        "principalId": "[parameters('principalId')]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "functionApp"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameHostingPlan')), 'Microsoft.Resources/deployments', format('hostingPlan-{0}', parameters('timestamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameNetworking')), 'Microsoft.Resources/deployments', format('networking-resources-{0}', parameters('timestamp')))]",
        "rgs",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('resourceGroupNameStorage')), 'Microsoft.Resources/deployments', format('storage-resources-{0}', parameters('timestamp')))]"
      ]
    }
  ]
}