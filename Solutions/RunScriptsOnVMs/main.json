{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "16051831137296500747"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "The location of the virtual machines where the run commands will be executed."
      }
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the resource group in which to deploy the resources."
      }
    },
    "vmNames": {
      "type": "array",
      "metadata": {
        "description": "Required. The names of the virtual machines on which to run the scripts."
      }
    },
    "scripts": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. An array of objects that define the scripts to run. Each object must contain a \"name\" and \"blobNameOrUri\" property."
      }
    },
    "logsStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the storage account where the logs will be stored."
      }
    },
    "logsContainerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the container in the storage account where the logs will be stored."
      }
    },
    "logsUserAssignedIdentityResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the user-assigned identity to use for logging."
      }
    },
    "scriptsStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the storage account where the scripts are stored."
      }
    },
    "scriptsContainerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the container in the storage account where the scripts are stored."
      }
    },
    "scriptsUserAssignedIdentityResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the user-assigned identity to use for running the scripts."
      }
    },
    "runCommandName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the run command to execute."
      }
    },
    "scriptContent": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The content of the script to run."
      }
    },
    "scriptUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The URI of the script to run."
      }
    },
    "timeoutInSeconds": {
      "type": "int",
      "defaultValue": -1,
      "metadata": {
        "description": "Optional. The timeout in seconds for the script execution. Default is -1 (no timeout)."
      }
    },
    "parameters": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The parameters to pass to the script."
      }
    },
    "protectedParameter": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The name and value of the protected parameter to pass to the script."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddHHmm')]",
      "metadata": {
        "description": "Do Not Update. Used to name deployments and logs."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "multipleScripts",
        "count": "[length(parameters('scripts'))]",
        "input": {
          "name": "[replace(parameters('scripts')[copyIndex('multipleScripts')].name, ' ', '-')]",
          "uri": "[if(contains(parameters('scripts')[copyIndex('multipleScripts')].blobNameOrUri, '://'), parameters('scripts')[copyIndex('multipleScripts')].blobNameOrUri, format('{0}/{1}', variables('scriptsContainerUri'), parameters('scripts')[copyIndex('multipleScripts')].blobNameOrUri))]",
          "arguments": "[coalesce(tryGet(parameters('scripts')[copyIndex('multipleScripts')], 'arguments'), '')]"
        }
      }
    ],
    "logsContainerUri": "[if(or(empty(parameters('logsContainerName')), empty(parameters('logsStorageAccountName'))), '', format('https://{0}.blob.{1}/{2}/', parameters('logsStorageAccountName'), environment().suffixes.storage, parameters('logsContainerName')))]",
    "scriptsContainerUri": "[if(or(empty(parameters('scriptsContainerName')), empty(parameters('scriptsStorageAccountName'))), '', format('https://{0}.blob.{1}/{2}/', parameters('scriptsStorageAccountName'), environment().suffixes.storage, parameters('scriptsContainerName')))]"
  },
  "resources": [
    {
      "copy": {
        "name": "runCommands",
        "count": "[length(parameters('vmNames'))]"
      },
      "condition": "[not(empty(parameters('scripts')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RunCommands-{0}-{1}', parameters('vmNames')[copyIndex()], parameters('timeStamp'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "scripts": {
            "value": "[variables('multipleScripts')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logsContainerUri": {
            "value": "[variables('logsContainerUri')]"
          },
          "logsUserAssignedIdentityClientId": "[if(empty(parameters('logsUserAssignedIdentityResourceId')), createObject('value', ''), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logsUserAssignedIdentityResourceId'), '/')[2], split(parameters('logsUserAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('logsUserAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId))]",
          "scriptsUserAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('scriptsUserAssignedIdentityResourceId'), '/')[2], split(parameters('scriptsUserAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('scriptsUserAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          },
          "virtualMachineName": {
            "value": "[parameters('vmNames')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "11249930917726481156"
            }
          },
          "parameters": {
            "scriptsUserAssignedIdentityClientId": {
              "type": "string"
            },
            "scripts": {
              "type": "array"
            },
            "location": {
              "type": "string"
            },
            "logsContainerUri": {
              "type": "string"
            },
            "timeStamp": {
              "type": "string"
            },
            "logsUserAssignedIdentityClientId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "param(\r\n  [string]$APIVersion,\r\n  [string]$Arguments='',\r\n  [string]$BlobStorageSuffix,\r\n  [string]$Name,\r\n  [string]$Uri,\r\n  [string]$UserAssignedIdentityClientId\r\n)\r\n\r\nfunction Write-OutputWithTimeStamp {\r\n  param(\r\n      [string]$Message\r\n  )    \r\n  $Timestamp = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'\r\n  $Entry = '[' + $Timestamp + '] ' + $Message\r\n  Write-Output $Entry\r\n}\r\n\r\nStart-Transcript -Path \"$env:SystemRoot\\Logs\\$Name.log\" -Force\r\nWrite-OutputWithTimeStamp \"Starting '$Name' script with the following parameters.\"\r\nWrite-Output ( $PSBoundParameters | Format-Table -AutoSize )\r\nIf ($Arguments -eq '') { $Arguments = $null }\r\n$TempDir = Join-Path $Env:TEMP -ChildPath $Name\r\nNew-Item -Path $TempDir -ItemType Directory -Force | Out-Null\r\n$WebClient = New-Object System.Net.WebClient\r\nIf ($Uri -match $BlobStorageSuffix -and $UserAssignedIdentityClientId -ne '') {\r\n  Write-OutputWithTimeStamp \"Getting access token for '$Uri' using User Assigned Identity.\"\r\n  $StorageEndpoint = ($Uri -split \"://\")[0] + \"://\" + ($Uri -split \"/\")[2] + \"/\"\r\n  $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=$APIVersion&resource=$StorageEndpoint&client_id=$UserAssignedIdentityClientId\"\r\n  $AccessToken = ((Invoke-WebRequest -Headers @{Metadata = $true } -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n  $WebClient.Headers.Add('x-ms-version', '2017-11-09')\r\n  $webClient.Headers.Add(\"Authorization\", \"Bearer $AccessToken\")\r\n}\r\n$SourceFileName = ($Uri -Split \"/\")[-1]\r\nWrite-OutputWithTimeStamp \"Downloading '$Uri' to '$TempDir'.\"\r\n$DestFile = Join-Path -Path $TempDir -ChildPath $SourceFileName\r\n$webClient.DownloadFile(\"$Uri\", \"$DestFile\")\r\nStart-Sleep -Seconds 10\r\nIf (!(Test-Path -Path $DestFile)) { Write-Error \"Failed to download $SourceFileName\"; Exit 1 }\r\nWrite-OutputWithTimeStamp 'Finished downloading'\r\nSet-Location -Path $TempDir\r\n$Ext = [System.IO.Path]::GetExtension($DestFile).ToLower().Replace('.','')\r\nswitch ($Ext) {\r\n  'exe' {\r\n      If ($Arguments) {\r\n        Write-OutputWithTimeStamp \"Executing '`\"$DestFile`\" $Arguments'\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -ArgumentList $Arguments -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }\r\n      Else {\r\n        Write-OutputWithTimeStamp \"Executing `\"$DestFile`\"\"\r\n        $Install = Start-Process -FilePath \"$DestFile\" -NoNewWindow -Wait -PassThru\r\n        Write-OutputWithTimeStamp \"Installation ended with exit code $($Install.ExitCode).\"\r\n      }      \r\n    }\r\n  'msi' {\r\n    If ($Arguments) {\r\n      If ($Arguments -notcontains $SourceFileName) {\r\n        $Arguments = \"/i $DestFile $Arguments\"\r\n      }\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe $Arguments'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList $Arguments -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'msiexec.exe /i $DestFile /qn'\"\r\n      $MsiExec = Start-Process -FilePath msiexec.exe -ArgumentList \"/i $DestFile /qn\" -Wait -PassThru\r\n      Write-OutputWithTimeStamp \"Installation ended with exit code $($MsiExec.ExitCode).\"\r\n    }    \r\n  }\r\n  'bat' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\" $Arguments'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\" $Arguments\" -Wait\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Executing 'cmd.exe `\"$DestFile`\"'\"\r\n      Start-Process -FilePath cmd.exe -ArgumentList \"`\"$DestFile`\"\" -Wait\r\n    }\r\n  }\r\n  'ps1' {\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile' with arguments '$Arguments'\"\r\n      & $DestFile $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$DestFile'\"\r\n      & $DestFile\r\n    }\r\n  }\r\n  'zip' {\r\n    $DestinationPath = Join-Path -Path \"$TempDir\" -ChildPath $([System.IO.Path]::GetFileNameWithoutExtension($SourceFileName))\r\n    Write-OutputWithTimeStamp \"Extracting '$DestFile' to '$DestinationPath'.\"\r\n    Expand-Archive -Path $DestFile -DestinationPath $DestinationPath -Force\r\n    Write-OutputWithTimeStamp \"Finding PowerShell script in root of '$DestinationPath'.\"\r\n    $PSScript = (Get-ChildItem -Path $DestinationPath -filter '*.ps1').FullName\r\n    If ($PSScript.count -gt 1) { $PSScript = $PSScript[0] }\r\n    If ($Arguments) {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript' with arguments '$Arguments'\"\r\n      & $PSScript $Arguments\r\n    }\r\n    Else {\r\n      Write-OutputWithTimeStamp \"Calling PowerShell Script '$PSScript'\"         \r\n      & $PSScript\r\n    }\r\n  }\r\n}\r\nRemove-Item -Path $TempDir -Recurse -Force -ErrorAction SilentlyContinue\r\nStop-Transcript",
            "apiVersion": "[if(startsWith(environment().name, 'USN'), '2017-08-01', '2018-02-01')]"
          },
          "resources": [
            {
              "copy": {
                "name": "runCommands",
                "count": "[length(parameters('scripts'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('scripts')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "properties": {
                "asyncExecution": false,
                "errorBlobManagedIdentity": "[if(empty(parameters('logsContainerUri')), null(), createObject('clientId', parameters('logsUserAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logsContainerUri')), null(), format('{0}{1}-{2}-error-{3}.log', parameters('logsContainerUri'), parameters('virtualMachineName'), parameters('scripts')[copyIndex()].name, parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logsContainerUri')), null(), createObject('clientId', parameters('logsUserAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logsContainerUri')), null(), format('{0}{1}-{2}-output-{3}.log', parameters('logsContainerUri'), parameters('virtualMachineName'), parameters('scripts')[copyIndex()].name, parameters('timeStamp')))]",
                "parameters": [
                  {
                    "name": "APIVersion",
                    "value": "[variables('apiVersion')]"
                  },
                  {
                    "name": "BlobStorageSuffix",
                    "value": "[format('blob.{0}', environment().suffixes.storage)]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('scriptsUserAssignedIdentityClientId')]"
                  },
                  {
                    "name": "Name",
                    "value": "[parameters('scripts')[copyIndex()].name]"
                  },
                  {
                    "name": "Uri",
                    "value": "[parameters('scripts')[copyIndex()].uri]"
                  },
                  {
                    "name": "Arguments",
                    "value": "[parameters('scripts')[copyIndex()].arguments]"
                  }
                ],
                "source": {
                  "script": "[variables('$fxv#0')]"
                },
                "treatFailureAsDeploymentFailure": true
              }
            }
          ]
        }
      }
    },
    {
      "copy": {
        "name": "runCommand",
        "count": "[length(parameters('vmNames'))]"
      },
      "condition": "[empty(parameters('scripts'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('RunCommand-{0}-{1}', parameters('vmNames')[copyIndex()], parameters('timeStamp'))]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vmName": {
            "value": "[parameters('vmNames')[0]]"
          },
          "runCommandName": {
            "value": "[parameters('runCommandName')]"
          },
          "logsContainerUri": {
            "value": "[variables('logsContainerUri')]"
          },
          "logsUserAssignedIdentityClientId": "[if(empty(parameters('logsUserAssignedIdentityResourceId')), createObject('value', ''), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logsUserAssignedIdentityResourceId'), '/')[2], split(parameters('logsUserAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('logsUserAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId))]",
          "scriptsUserAssignedIdentityClientId": "[if(empty(parameters('scriptsUserAssignedIdentityResourceId')), createObject('value', ''), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('scriptsUserAssignedIdentityResourceId'), '/')[2], split(parameters('scriptsUserAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(parameters('scriptsUserAssignedIdentityResourceId'), '/'))), '2018-11-30').clientId))]",
          "parameters": {
            "value": "[parameters('parameters')]"
          },
          "protectedParameter": {
            "value": "[parameters('protectedParameter')]"
          },
          "scriptContent": {
            "value": "[parameters('scriptContent')]"
          },
          "scriptUri": {
            "value": "[parameters('scriptUri')]"
          },
          "timeoutInSeconds": {
            "value": "[parameters('timeoutInSeconds')]"
          },
          "timeStamp": {
            "value": "[parameters('timeStamp')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "4397283146258426242"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "vmName": {
              "type": "string"
            },
            "runCommandName": {
              "type": "string"
            },
            "logsUserAssignedIdentityClientId": {
              "type": "string"
            },
            "logsContainerUri": {
              "type": "string"
            },
            "parameters": {
              "type": "array"
            },
            "protectedParameter": {
              "type": "secureObject",
              "defaultValue": {}
            },
            "scriptContent": {
              "type": "string",
              "defaultValue": ""
            },
            "scriptUri": {
              "type": "string",
              "defaultValue": ""
            },
            "scriptsUserAssignedIdentityClientId": {
              "type": "string"
            },
            "timeoutInSeconds": {
              "type": "int"
            },
            "timeStamp": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('vmName'), parameters('runCommandName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "errorBlobManagedIdentity": "[if(empty(parameters('logsUserAssignedIdentityClientId')), null(), createObject('clientId', parameters('logsUserAssignedIdentityClientId')))]",
                "errorBlobUri": "[if(empty(parameters('logsContainerUri')), null(), format('{0}{1}-{2}-error-{3}.log', parameters('logsContainerUri'), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2023-03-01', 'full'), parameters('runCommandName'), parameters('timeStamp')))]",
                "outputBlobManagedIdentity": "[if(empty(parameters('logsUserAssignedIdentityClientId')), null(), createObject('clientId', parameters('logsUserAssignedIdentityClientId')))]",
                "outputBlobUri": "[if(empty(parameters('logsContainerUri')), null(), format('{0}{1}-{2}-output-{3}.log', parameters('logsContainerUri'), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2023-03-01', 'full'), parameters('runCommandName'), parameters('timeStamp')))]",
                "parameters": "[if(empty(parameters('parameters')), null(), parameters('parameters'))]",
                "protectedParameters": "[if(not(empty(parameters('protectedParameter'))), createArray(parameters('protectedParameter')), null())]",
                "source": {
                  "scriptUri": "[if(empty(parameters('scriptUri')), null(), parameters('scriptUri'))]",
                  "script": "[if(empty(parameters('scriptContent')), null(), parameters('scriptContent'))]",
                  "scriptUriManagedIdentity": "[if(empty(parameters('scriptsUserAssignedIdentityClientId')), null(), createObject('clientId', parameters('scriptsUserAssignedIdentityClientId')))]"
                },
                "timeoutInSeconds": "[if(equals(parameters('timeoutInSeconds'), -1), null(), parameters('timeoutInSeconds'))]",
                "treatFailureAsDeploymentFailure": true
              }
            }
          ]
        }
      }
    }
  ]
}